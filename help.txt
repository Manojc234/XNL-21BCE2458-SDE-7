package com.sc.faas.dto.Protegrity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import java.util.Date;

@Entity
public class ProtegrityInventoryDTO {

    @Id
    @Column(name = "CIT_SNO")
    private Long citSno;

    @Column(name = "CIT_TYPE")
    private String citType;

    @Column(name = "CIT_APPLICATION_NAME")
    private String citApplicationName;

    @Column(name = "CIT_APP_ONBOARD_DATE")
    private Date citAppOnboardDate;

    @Column(name = "CIT_APP_STATUS")
    private String citAppStatus;

    @Column(name = "CIT_ITAM_NO")
    private String citItamNo;

    @Column(name = "CIT_APP_OWNER")
    private String citAppOwner;

    @Column(name = "CIT_BUS_CRITICALLITY")
    private String citBusCriticality;

    @Column(name = "CIT_BUS_UNIT")
    private String citBusUnit;

    @Column(name = "CIT_PRI_CONTACT")
    private String citPriContact;

    @Column(name = "CIT_REM_GROUP")
    private String citRemGroup;

    @Column(name = "CIT_SEC_CONTACT")
    private String citSecContact;

    @Column(name = "CIT_SERVICE_PROVIDED")
    private String citServiceProvided;

    @Column(name = "CIT_SERVICE_MODEL")
    private String citServiceModel;

    @Column(name = "CIT_USE_CASE")
    private String citUseCase;

    @Column(name = "CIT_DATABASE")
    private String citDatabase;

    @Column(name = "CIT_DB_HOSTED_TYPE")
    private String citDbHostedType;

    @Column(name = "CIT_STORAGE_DEVICES")
    private String citStorageDevices;

    @Column(name = "CIT_BUSS_JUSTIFICATION")
    private String citBussJustification;

    @Column(name = "CIT_TYPE_PR_NONPR")
    private String citTypePrNonpr;

    @Column(name = "CIT_REQ_NO")
    private String citReqNo;

    @Column(name = "CIT_ACTIVITY")
    private String citActivity;

    @Column(name = "CIT_AMENDED_DATE")
    private Date citAmendedDate;

    @Column(name = "CIT_AMENDED_BY")
    private String citAmendedBy;

    @Column(name = "CIT_REMARKS")
    private String citRemarks;

    @Column(name = "CIT_ENT_SPOC")
    private String citEntSpoc;

    @Column(name = "CIT_PROD_DATE")
    private Date citProdDate;

    @Column(name = "CIT_PROD_CR_NO")
    private String citProdCrNo;

    @Column(name = "RECERT_DATE")
    private Date recertDate;

    @Column(name = "RECERT_BY")
    private String recertBy;

    @Column(name = "APP_EXP_DAYS")
    private Long appExpDays;

    @Column(name = "RECERT_APP_STATUS")
    private String recertAppStatus;

    // Getters and Setters

    public Long getCitSno() { return citSno; }
    public void setCitSno(Long citSno) { this.citSno = citSno; }

    public String getCitType() { return citType; }
    public void setCitType(String citType) { this.citType = citType; }

    public String getCitApplicationName() { return citApplicationName; }
    public void setCitApplicationName(String citApplicationName) { this.citApplicationName = citApplicationName; }

    public Date getCitAppOnboardDate() { return citAppOnboardDate; }
    public void setCitAppOnboardDate(Date citAppOnboardDate) { this.citAppOnboardDate = citAppOnboardDate; }

    public String getCitAppStatus() { return citAppStatus; }
    public void setCitAppStatus(String citAppStatus) { this.citAppStatus = citAppStatus; }

    public String getCitItamNo() { return citItamNo; }
    public void setCitItamNo(String citItamNo) { this.citItamNo = citItamNo; }

    public String getCitAppOwner() { return citAppOwner; }
    public void setCitAppOwner(String citAppOwner) { this.citAppOwner = citAppOwner; }

    public String getCitBusCriticality() { return citBusCriticality; }
    public void setCitBusCriticality(String citBusCriticality) { this.citBusCriticality = citBusCriticality; }

    public String getCitBusUnit() { return citBusUnit; }
    public void setCitBusUnit(String citBusUnit) { this.citBusUnit = citBusUnit; }

    public String getCitPriContact() { return citPriContact; }
    public void setCitPriContact(String citPriContact) { this.citPriContact = citPriContact; }

    public String getCitRemGroup() { return citRemGroup; }
    public void setCitRemGroup(String citRemGroup) { this.citRemGroup = citRemGroup; }

    public String getCitSecContact() { return citSecContact; }
    public void setCitSecContact(String citSecContact) { this.citSecContact = citSecContact; }

    public String getCitServiceProvided() { return citServiceProvided; }
    public void setCitServiceProvided(String citServiceProvided) { this.citServiceProvided = citServiceProvided; }

    public String getCitServiceModel() { return citServiceModel; }
    public void setCitServiceModel(String citServiceModel) { this.citServiceModel = citServiceModel; }

    public String getCitUseCase() { return citUseCase; }
    public void setCitUseCase(String citUseCase) { this.citUseCase = citUseCase; }

    public String getCitDatabase() { return citDatabase; }
    public void setCitDatabase(String citDatabase) { this.citDatabase = citDatabase; }

    public String getCitDbHostedType() { return citDbHostedType; }
    public void setCitDbHostedType(String citDbHostedType) { this.citDbHostedType = citDbHostedType; }

    public String getCitStorageDevices() { return citStorageDevices; }
    public void setCitStorageDevices(String citStorageDevices) { this.citStorageDevices = citStorageDevices; }

    public String getCitBussJustification() { return citBussJustification; }
    public void setCitBussJustification(String citBussJustification) { this.citBussJustification = citBussJustification; }

    public String getCitTypePrNonpr() { return citTypePrNonpr; }
    public void setCitTypePrNonpr(String citTypePrNonpr) { this.citTypePrNonpr = citTypePrNonpr; }

    public String getCitReqNo() { return citReqNo; }
    public void setCitReqNo(String citReqNo) { this.citReqNo = citReqNo; }

    public String getCitActivity() { return citActivity; }
    public void setCitActivity(String citActivity) { this.citActivity = citActivity; }

    public Date getCitAmendedDate() { return citAmendedDate; }
    public void setCitAmendedDate(Date citAmendedDate) { this.citAmendedDate = citAmendedDate; }

    public String getCitAmendedBy() { return citAmendedBy; }
    public void setCitAmendedBy(String citAmendedBy) { this.citAmendedBy = citAmendedBy; }

    public String getCitRemarks() { return citRemarks; }
    public void setCitRemarks(String citRemarks) { this.citRemarks = citRemarks; }

    public String getCitEntSpoc() { return citEntSpoc; }
    public void setCitEntSpoc(String citEntSpoc) { this.citEntSpoc = citEntSpoc; }

    public Date getCitProdDate() { return citProdDate; }
    public void setCitProdDate(Date citProdDate) { this.citProdDate = citProdDate; }

    public String getCitProdCrNo() { return citProdCrNo; }
    public void setCitProdCrNo(String citProdCrNo) { this.citProdCrNo = citProdCrNo; }

    public Date getRecertDate() { return recertDate; }
    public void setRecertDate(Date recertDate) { this.recertDate = recertDate; }

    public String getRecertBy() { return recertBy; }
    public void setRecertBy(String recertBy) { this.recertBy = recertBy; }

    public Long getAppExpDays() { return appExpDays; }
    public void setAppExpDays(Long appExpDays) { this.appExpDays = appExpDays; }

    public String getRecertAppStatus() { return recertAppStatus; }
    public void setRecertAppStatus(String recertAppStatus) { this.recertAppStatus = recertAppStatus; }
}





package com.sc.faas.repository.Protegrity;

import com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO;
import io.quarkus.hibernate.orm.panache.PanacheRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.persistence.Query;
import java.util.List;

@ApplicationScoped
public class ProtegrityInventoryRepository implements PanacheRepository<ProtegrityInventoryDTO> {

    public List<ProtegrityInventoryDTO> findByAppUser(String appUser) {
        String sql = """
            SELECT "CIT_SNO",
                   "CIT_TYPE",
                   CIT_APPLICATION_NAME,
                   "CIT_APP_ONBOARD_DATE",
                   "CIT_APP_STATUS",
                   "CIT_ITAM_NO",
                   "CIT_APP_OWNER",
                   "CIT_BUS_CRITICALLITY",
                   "CIT_BUS_UNIT",
                   "CIT_PRI_CONTACT",
                   "CIT_REM_GROUP",
                   "CIT_SEC_CONTACT",
                   "CIT_SERVICE_PROVIDED",
                   "CIT_SERVICE_MODEL",
                   DECODE(CIT_USE_CASE, 'Others', CIT_USECASE_OTHERS, CIT_USE_CASE) AS CIT_USE_CASE,
                   DECODE(CIT_DATABASE, 'Others', CIT_DB_OTHERS, CIT_DATABASE) AS CIT_DATABASE,
                   "CIT_DB_HOSTED_TYPE",
                   DECODE(CIT_STORAGE_DEVICES, 'Others', CIT_STORAGE_OTHERS, CIT_STORAGE_DEVICES) AS CIT_STORAGE_DEVICES,
                   "CIT_BUSS_JUSTIFICATION",
                   "CIT_TYPE_PR_NONPR",
                   "CIT_REQ_NO",
                   "CIT_ACTIVITY",
                   "CIT_AMENDED_DATE",
                   "CIT_AMENDED_BY",
                   "CIT_REMARKS",
                   "CIT_ENT_SPOC",
                   "CIT_PROD_DATE",
                   "CIT_PROD_CR_NO",
                   RECERT_DATE,
                   RECERT_BY,
                   TRUNC(RECERT_APP_RENEWAL_DATE) - TRUNC(SYSDATE) AS APP_EXP_DAYS,
                   DECODE(RECERT_APP_STATUS, 'RECERT_RESPOND', 'INREVIEW', 'RECERT_COMPLETED', 'COMPLETED', RECERT_APP_STATUS) AS RECERT_APP_STATUS
            FROM "CAAS_INVENTORY_TAB"
            WHERE CIT_TYPE = 'protegrity'
              AND CIT_APP_STATUS NOT IN ('Decommissioned')
              AND (
                  CIT_REM_GROUP IN (
                      SELECT DISTINCT DR_SUPP_GRP_NAME
                      FROM CAAS_REMEDY
                      WHERE DR_PSID = :APP_USER
                        AND DR_FUNC_ROLE IN ('Incident Manager', 'Support Group Manager', 'Support Group Admin', 'PIM', 'Work Order Assignee', 'Request Approver')
                  )
                  OR CIT_PRI_CONTACT = :APP_USER
                  OR CIT_SEC_CONTACT = :APP_USER
                  OR CIT_APP_OWNER = :APP_USER
                  OR CIT_ENT_SPOC = :APP_USER
                  OR :APP_USER IN (SELECT CUM_USERID FROM CAAS_USER_MAPPING_TAB WHERE CUM_STATUS = 'Active')
              )
        """;

        Query query = getEntityManager().createNativeQuery(sql, ProtegrityInventoryDTO.class);
        query.setParameter("APP_USER", appUser);
        return query.getResultList();
    }
}


package com.sc.faas.service.Protegrity;

import com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO;
import com.sc.faas.repository.Protegrity.ProtegrityInventoryRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import java.util.List;

@ApplicationScoped
public class ProtegrityInventoryService {

    @Inject
    private ProtegrityInventoryRepository repository;

    public List<ProtegrityInventoryDTO> getProtegrityInventory(String appUser) {
        try {
            return repository.findByAppUser(appUser);
        } catch (Exception e) {
            System.err.println("Error fetching Protegrity inventory: " + e.getMessage());
            throw new RuntimeException("Failed to fetch Protegrity inventory", e);
        }
    }
}


package com.sc.faas;

import com.sc.faas.dto.Customer;
import com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO;
import com.sc.faas.repository.CustomerRepository;
import com.sc.faas.service.Protegrity.ProtegrityInventoryService;
import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import java.util.List;

@Path("/api/process")
public class Function {

    @Inject
    private ProtegrityInventoryService protegrityService;

    @Inject
    private CustomerRepository customerRepository;

    @GET
    @Path("/get/protegrity-inventory")
    @Produces(MediaType.APPLICATION_JSON)
    public List<ProtegrityInventoryDTO> getProtegrityInventory(@QueryParam("appUser") String appUser) {
        System.out.println("Fetching Protegrity inventory for appUser: " + (appUser != null ? appUser : "found null"));
        return protegrityService.getProtegrityInventory(appUser);
    }

    @GET
    @Path("/get/customer")
    @Produces(MediaType.APPLICATION_JSON)
    public Customer getCustomer() {
        System.out.println("Fetching customer data");
        return customerRepository.getMockCustomer();
    }
}



