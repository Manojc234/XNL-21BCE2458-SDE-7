import { Routes, Route, Navigate,BrowserRouter, useNavigate } from "react-router-dom";

import ChangeAccount from "./pages/ChangeAccount";
import ServiceRequest from "./pages/ServiceRequest";
import EditAccount from "./pages/EditAccount";
import EditEmployee from "./pages/EditEmployeeAccounts";
import AccountDetails from "./pages/AccountDetails";
import ViewEmployees from "./pages/ViewEmployees";
import Layout from "./pages/Layout";
import ProtectedRoute from "./Components/ProtectedRoute";
import ChangePassword from "./pages/ChangePassword";
import PaymentForm from "./Components/PaymentForm";
import DraftManagement from "./Components/DraftManagement";
import Dashboard from "./Components/DashboardLayout";
import HeaderRowApprover from "./Components/SubmitPayroll/HeaderRowApprover";
import HeaderRow from "./Components/HeaderRow";
import ProgressTracker from "./Components/ProgressTracker";
import FilterImplementation from "./Components/FilterImplementation";
import SubmitApproval from "./Components/SubmitPayroll/SubmitApproval";


function App() {
  const role="approver";
  return (
      <BrowserRouter>    
        <Routes>
            <Route path="/" element={<Layout role={role} />}>
              <Route
                path="/change-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <ChangeAccount />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/service-request"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <ServiceRequest />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/edit-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <EditAccount />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/edit-employee"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <EditEmployee />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/view-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <AccountDetails />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/view-employees"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <ViewEmployees />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/change-password"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator", "manager", "approver"]}
                  >
                    <ChangePassword />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/payee-roll"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator"]}
                  >
                    <PaymentForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/drafts"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator"]}
                  >
                    <DraftManagement />
                  </ProtectedRoute>
                }
              />
              <Route
              path="/approvals"
              element={
              <ProtectedRoute role={role} allowedRoles={["approver"]}>
                <Dashboard role={role}>
                {role === "approver1" || "approver2" ? <HeaderRowApprover /> : <HeaderRow />}
                <ProgressTracker role={role} />
                {role === "batching" ? (
                <FilterImplementation />
                ) : (
                <SubmitApproval />
                )}
                </Dashboard>
              </ProtectedRoute>}
              />
            </Route>
        </Routes>
      </BrowserRouter>
     
 
  );
}
export default App;
import React from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import { Navbar, Container, Nav } from "react-bootstrap";
import { BellFill } from "react-bootstrap-icons";
import scLogo from "../assets/sc-lock-up-english-grey-rgb.png"

function Dashboard({ children, role }) {
  const menuItems = {
    batching: ["Dashboard", "Accept Payroll"],
    approver1: ["Dashboard", "Pending Approvals"],
    approver2: ["Dashboard", "Pending Approvals"],
    approver3: ["Dashboard", "Pending Approvals"],
    release: ["Dashboard", "Release to Bank", "History"]
  };

  const items = menuItems[role] || ["Dashboard"];

  const activeMap = {
    batching: "Accept Payroll",
    approver1: "Pending Approvals",
    approver2: "Pending Approvals",
    approver3: "Pending Approvals",
    release: "Release to Bank"
  };
  const activeItem = activeMap[role] || "Dashboard";

  return (
    <div className="d-flex" style={{ minHeight: "100vh" }}>
      {/* Sidebar */}
      <div
        style={{
          width: "220px",
          background: "linear-gradient(180deg, #0d6efd 0%, #084298 100%)",
          color: "white",
          paddingTop: "2rem",
          display: "flex",
          flexDirection: "column",
          boxShadow: "2px 0px 6px rgba(0,0,0,0.1)"
        }}
      >
        <Nav className="flex-column px-2">
          {items.map((item, idx) => (
            <Nav.Link
              key={idx}
              href="#"
              className={`rounded px-3 py-2 mb-1 fw-semibold ${
                item === activeItem
                  ? "bg-white text-primary shadow-sm"
                  : "text-white"
              }`}
              style={{ transition: "0.2s" }}
              onMouseEnter={(e) => {
                if (item !== activeItem) e.target.style.background = "#0b5ed7";
              }}
              onMouseLeave={(e) => {
                if (item !== activeItem) e.target.style.background = "transparent";
              }}
            >
              {item}
            </Nav.Link>
          ))}
        </Nav>
      </div>

      {/* Right side */}
      <div className="flex-grow-1">
        <Navbar bg="white" className="shadow-sm py-2">
          <Container fluid>
            <div className="d-flex align-items-center">
              <img
                src={scLogo}
                alt="Logo"
                style={{ height: "45px", marginRight: "16px" }}
              />
            </div>
            <div className="d-flex align-items-center">
              <BellFill
                size={20}
                className="me-3 text-secondary"
                style={{ cursor: "pointer" }}
              />
              <span className="fw-bold text-primary">Ayush Mangy</span>
            </div>
          </Container>
        </Navbar>

        <div className="p-4 bg-light" style={{ minHeight: "calc(100vh - 56px)" }}>
          {children}
        </div>
      </div>
    </div>
  );
}

export default Dashboard;


import React, { useState, useEffect } from "react";
import { SidebarData } from "./SidebarData";
import "../Styles/custom.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { MdLogout } from "react-icons/md";
import { useNavigate, Link } from "react-router-dom";

function Sidebar({role,setSidebarWidth}) {
  const [activeMenu, setActiveMenu] = useState(null);
  const [hoverSubMenu, setHoverSubMenu] = useState(null);
  const [boxTop, setBoxTop] = useState(0);

  // Modal state
  const [restrictOpen, setRestrictOpen] = useState(false);
  const [restrictMsg, setRestrictMsg] = useState("");

  const navigate = useNavigate();

  // Role-based access
  const checkAccess = (menuKey, subKey, thirdKey) => {
    if (
      (menuKey === "Create" ||
        menuKey === "Payroll" ||
        menuKey === "Rolled Payees" ||
        menuKey === "Drafts" ||
        menuKey === "Quick Currency Calculator") &&
      role !== "creator"
    )
      return false;

    if (
      (menuKey === "Manage" ||
        menuKey === "Make Approvers" ||
        menuKey === "View Rolled Payees") &&
      role !== "manager"
    )
      return false;

    if (
      (menuKey === "Approver" ||
        menuKey === "Approved Payees" ||
        menuKey === "Pending Payees") &&
      role !== "approver"
    )
      return false;

    if (
      (menuKey === "Add Account" ||
        menuKey === "Change Account" ||
        menuKey === "Edit Account" ||
        menuKey === "Edit Employee Accounts") &&
      (role === "approver" || role === "manager")
    )
      return false;
   

    if (
      (menuKey === "View Approvers" ||
        menuKey === "View Creators" ||
        menuKey === "View Managers") &&
      (role === "creator" || role === "approver")
    )
      return false;

    if (menuKey === "Change Account" && role === "manager") return false;

    return true;
  };

  const handleClick = (menuKey, subKey, thirdKey) => {
    if (!checkAccess(menuKey, subKey, thirdKey)) {
      setRestrictMsg(
        `🚫 You are restricted from accessing "${thirdKey || subKey || menuKey}"!`
      );
      setRestrictOpen(true);
      return;
    }

    toast.success(`✅ Accessing ${thirdKey || subKey || menuKey}`, {
      position: "top-right",
      autoClose: 1500,
    });

    switch (thirdKey||subKey) {
      case "Change Account":
        navigate("/change-account");
        break;
      case "Service Request":
        navigate("/service-request");
        break;
      case "Edit Account":
        navigate("/edit-account");
        break;
      case "Edit Employee Accounts":
        navigate("/edit-employee");
        break;
      case "Account Details":
        navigate("/view-account");
        break;
      case "Employees":
        navigate("/view-employees");
        break;
      case "Change Password":   
        navigate("/change-password");
        break;
      case "Payroll":   
        navigate("/payee-roll");
        break;
      case "Drafts":   
        navigate("/drafts");
        break;
      case "Approved Payees":   
        navigate("/approvals");
        break;
      default:
        break;
    }

    setActiveMenu(null);
    setHoverSubMenu(null);
  };

  useEffect(() => {
    const onKey = (e) => {
      if (e.key === "Escape") setRestrictOpen(false);
    };
    if (restrictOpen) window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [restrictOpen]);
  useEffect(() => {
    let width = 80; // Menu1
    if (activeMenu && SidebarData[activeMenu]?.subMenu) {
      width += 160; // Menu2
      if (hoverSubMenu && SidebarData[activeMenu].subMenu[hoverSubMenu]?.subMenu) {
        width += 160; // Menu3
      }
    }
    setSidebarWidth(width);
  }, [activeMenu, hoverSubMenu, setSidebarWidth]);

  return (
    <div className={`sidbar ${
    activeMenu && SidebarData[activeMenu]?.subMenu
      ? "expanded"
      : "collapsed"
  }`}>
      {/* Navbar */}
      <div className="nvbar">
        <Link to="/" className="nv-left flex items-center gap-2 px-4 py-3 ">
          <img
            className="brand-logo cursor-pointer"
            src="https://upload.wikimedia.org/wikipedia/commons/7/7e/Standard_Chartered_Logo_%282021%2C_Logo_only%29.svg"
            alt="SC Logo"
          />
          <span className="brand-name">
            <h3>
              Standard <br /> Chartered
            </h3>
          </span>
        </Link>
        <div className="nvbar-right">
          <MdLogout
            size={30}
            color="white"
            className="nv-icon cursor-pointer"
          />
        </div>
      </div>

      {/* Main Menu */}
      <div className="col main-col">
        {Object.entries(SidebarData).map(([menuKey, menuVal]) => (
          <div
            key={menuKey}
            className={`menu-item vertical ${
              activeMenu === menuKey ? "active" : ""
            }`}
            onClick={() => {
              if (!checkAccess(menuKey)) {
                setRestrictMsg(
                  `🚫 You are restricted from accessing "${menuKey}"!`
                );
                setRestrictOpen(true);
                return;
              }
              setActiveMenu(activeMenu === menuKey ? null : menuKey);
            }}
          >
            <span className="icon big">{menuVal.icon}</span>
            <span>{menuKey}</span>
          </div>
        ))}
      </div>

      {/* Sub Menu */}
      {activeMenu && SidebarData[activeMenu]?.subMenu && (
        <div className="col-2 sub-col">
          {Object.entries(SidebarData[activeMenu].subMenu).map(
            ([subKey, subVal]) => (
              <div
                key={subKey}
                className={`menu-item-2 vertical ${
                  hoverSubMenu === subKey ? "active" : ""
                }`}
                onMouseEnter={(e) => {
                  setHoverSubMenu(subKey);
                  setBoxTop(e.currentTarget.offsetTop);
                }}
                onClick={() => handleClick(activeMenu, subKey)}
              >
                <span className="icon">{subVal.icon}</span>
                <span>{subKey}</span>
              </div>
            )
          )}
        </div>
      )}

      {/* Third Level Menu */}
      {activeMenu &&
        hoverSubMenu &&
        SidebarData[activeMenu]?.subMenu?.[hoverSubMenu]?.subMenu && (
          <div className="submenu-box" style={{ top: boxTop }}>
            {Object.entries(
              SidebarData[activeMenu].subMenu[hoverSubMenu].subMenu
            ).map(([thirdKey, thirdVal]) => (
              <div
                key={thirdKey}
                className="menu-item-3 vertical leaf"
                onClick={() => handleClick(activeMenu, hoverSubMenu, thirdKey)}
              >
                <span className="icon">{thirdVal}</span>
                <span>{thirdKey}</span>
              </div>
            ))}
          </div>
        )}

      {/* Restriction Modal */}
      {restrictOpen && (
        <div className="modal-overlay" onClick={() => setRestrictOpen(false)}>
          <div className="modal-card" onClick={(e) => e.stopPropagation()}>
            <h3 className="modal-title">Access Restricted</h3>
            <p className="modal-text">{restrictMsg}</p>
            <div className="modal-actions">
              <button
                className="modal-btn"
                onClick={() => setRestrictOpen(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Sidebar;
import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import { Button, Table, Form, Card } from "react-bootstrap";

function BatchTable({batches}) {
  
  const [selected, setSelected] = useState([]);
  React.useEffect(() => {
  setSelected((prevSelected) => prevSelected.filter(id => batches.some(b => b.id === id)));
}, [batches]);

  const handleSelected = (id) => {
    setSelected((prev) =>
      prev.includes(id) ? prev.filter((sid) => sid !== id) : [...prev, id]
    );
  };

  const handleAll = () => {
    if (selected.length === batches.length) {
      setSelected([]);
    } else {
      setSelected(batches.map((b) => b.id));
    }
  };

  const handleAccept = () => {
    alert(`Accepted batches: ${selected.join(", ")}`);
  };

  const handleReject = () => {
    alert(`Rejected batches: ${selected.join(", ")}`);
  };

  return (
    <Card className="border-0 rounded-4">
      <Card.Body>
        <div className="d-flex justify-content-between align-items-center mb-3">
          <h4 className="fw-bold m-0">Batch Approval</h4>
        </div>

        <Table hover responsive borderless className="align-middle">
          <thead className="bg-light">
            <tr>
              <th style={{ width: "50px" }}>
                <Form.Check
                  type="checkbox"
                  checked={selected.length === batches.length}
                  onChange={handleAll}
                />
              </th>
              <th className="fw-semibold">Batch Reference</th>
              <th className="fw-semibold">Batch Name</th>
              <th className="fw-semibold">Created By</th>
              <th className="fw-semibold text-center">Payments</th>
              <th className="fw-semibold text-end">Total Amount</th>
              <th className="fw-semibold text-center">Currency</th>
              <th className="fw-semibold">Execution Date</th>
            </tr>
          </thead>
          <tbody>
            {batches.map((batch) => (
              <tr
                key={batch.id}
                className={selected.includes(batch.id) ? "table-active" : ""}
                style={{ cursor: "pointer" }}
                onClick={() => handleSelected(batch.id)}
              >
                <td>
                  <Form.Check
                    type="checkbox"
                    checked={selected.includes(batch.id)}
                    onChange={() => handleSelected(batch.id)}
                    onClick={(e) => e.stopPropagation()}
                  />
                </td>
                <td className="fw-medium">{batch.batchId}</td>
                <td>{batch.batchName}</td>
                <td>{batch.createdBy}</td>
                <td className="text-center">{batch.numPayments}</td>
                <td className="text-end text-success fw-semibold">
                {batch.currency === "INR" ? "₹" : "$"}{batch.amount.toLocaleString()}
                </td>
                <td className="text-center">{batch.currency}</td>
                <td>{batch.executionDate}</td>
              </tr>
            ))}
          </tbody>
        </Table>

        <div className="d-flex gap-2 mt-3 justify-content-end">
          <Button
            variant="outline-success"
            onClick={handleAccept}
            disabled={!selected.length}
          >
            ✅ Accept
          </Button>
          <Button
            variant="outline-danger"
            onClick={handleReject}
            disabled={!selected.length}
          >
            ❌ Reject
          </Button>
        </div>
      </Card.Body>
    </Card>
  );
}

export default BatchTable;


import React, { useState } from "react";
import { Outlet, useNavigate } from "react-router-dom";
import Sidebar from "../Components/Sidebar";
import "../Styles/layout.css";

const Layout = ({role}) => {

  // Track sidebar width dynamically
  const [sidebarWidth, setSidebarWidth] = useState(80); // default = menu1 width

  return (
    <div className="layout-container">
      {/* Sidebar */}
      <Sidebar role={role} setSidebarWidth={setSidebarWidth} />

      {/* Main content */}
      <div
        className="layout-content"
        style={{
          marginLeft: `${sidebarWidth+40}px`,
          transition: "margin-left 0.3s ease",
          flex: 1,
          padding: "20px",
        }}
      >
        <Outlet />
      </div>
    </div>
  );
};

export default Layout;
