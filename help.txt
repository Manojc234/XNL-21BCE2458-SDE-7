import {Routes, Route, Navigate, BrowserRouter } from "react-router-dom";
import ChangeAccount from "./pages/ChangeAccount";
import ServiceRequest from "./pages/ServiceRequest";
import EditAccount from "./pages/EditAccount";
import EditEmployee from "./pages/EditEmployeeAccounts";
import AccountDetails from "./pages/AccountDetails";
import ViewEmployees from "./pages/ViewEmployees";
import Layout from "./pages/Layout";
import ProtectedRoute from "./Components/ProtectedRoute";
import ChangePassword from "./pages/ChangePassword";
import Login from "./pages/Login";
import { useEffect, useState } from "react";


function App() {
 // const role = "manager"; // 🔹 You’ll fetch this dynamically later
 const [role, setRole] = useState(null);
  // Restore role on refresh
  useEffect(() => {
    const savedRole = localStorage.getItem("role");
    if (savedRole) setRole(savedRole);
  }, []);

  const handleLogin = (roleValue) => {
    setRole(roleValue);
    localStorage.setItem("role", roleValue);
  };

  

  return (
    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login onLogin={handleLogin} />} />
        {role ?(
        <Route path="/" element={<Layout role={role}/>}>
          <Route
            path="/change-account"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <ChangeAccount />
              </ProtectedRoute>
            }
          />
          <Route
            path="/service-request"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                <ServiceRequest />
              </ProtectedRoute>
            }
          />
          <Route
            path="/edit-account"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <EditAccount />
              </ProtectedRoute>
            }
          />
          <Route
            path="/edit-employee"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <EditEmployee />
              </ProtectedRoute>
            }
          />
          <Route
            path="/view-account"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                <AccountDetails />
              </ProtectedRoute>
            }
          />
          <Route
            path="/view-employees"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                <ViewEmployees />
              </ProtectedRoute>
            }
          />
          <Route
            path="/change-password"
            element={
              <ProtectedRoute role={role} allowedRoles={["creator", "manager","approver"]}>
                <ChangePassword />
              </ProtectedRoute>
            }
          />
        </Route>
        ):(<Route path="*" element={<Navigate to="/" />} />)}
      </Routes>
    </BrowserRouter>
  );
}

export default App;


import React, { useState, useEffect } from "react";
import { SidebarData } from "./SidebarData";
import "../Styles/custom.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { MdLogout } from "react-icons/md";
import { useNavigate, Link } from "react-router-dom";

function Sidebar({ role,setSidebarWidth,onLogout}) {
  const [activeMenu, setActiveMenu] = useState(null);
  const [hoverSubMenu, setHoverSubMenu] = useState(null);
  const [boxTop, setBoxTop] = useState(0);

  // Modal state
  const [restrictOpen, setRestrictOpen] = useState(false);
  const [restrictMsg, setRestrictMsg] = useState("");

  const navigate = useNavigate();

  // Role-based access
  const checkAccess = (menuKey, subKey, thirdKey) => {
    if (
      (menuKey === "Create" ||
        menuKey === "Payroll" ||
        menuKey === "Rolled Payees" ||
        menuKey === "Drafts" ||
        menuKey === "Quick Currency Calculator") &&
      role !== "creator"
    )
      return false;

    if (
      (menuKey === "Manage" ||
        menuKey === "Make Approvers" ||
        menuKey === "View Rolled Payees") &&
      role !== "manager"
    )
      return false;

    if (
      (menuKey === "Approver" ||
        menuKey === "Approved Payees" ||
        menuKey === "Pending Payees") &&
      role !== "approver"
    )
      return false;

    if (
      (menuKey === "Add Account" ||
        menuKey === "Change Account" ||
        menuKey === "Edit Account" ||
        menuKey === "Edit Employee Accounts") &&
      (role === "approver" || role === "manager")
    )
      return false;

    if (
      (menuKey === "View Approvers" ||
        menuKey === "View Creators" ||
        menuKey === "View Managers") &&
      (role === "creator" || role === "approver")
    )
      return false;

    if (menuKey === "Change Account" && role === "manager") return false;

    return true;
  };

  const handleClick = (menuKey, subKey, thirdKey) => {
    if (!checkAccess(menuKey, subKey, thirdKey)) {
      setRestrictMsg(
        `🚫 You are restricted from accessing "${thirdKey || subKey || menuKey}"!`
      );
      setRestrictOpen(true);
      return;
    }

    toast.success(`✅ Accessing ${thirdKey || subKey || menuKey}`, {
      position: "top-right",
      autoClose: 1500,
    });

    switch (thirdKey||subKey) {
      case "Change Account":
        navigate("/change-account");
        break;
      case "Service Request":
        navigate("/service-request");
        break;
      case "Edit Account":
        navigate("/edit-account");
        break;
      case "Edit Employee Accounts":
        navigate("/edit-employee");
        break;
      case "Account Details":
        navigate("/view-account");
        break;
      case "Employees":
        navigate("/view-employees");
        break;
      case "Change Password":   
        navigate("/change-password");
        break;
      default:
        break;
    }

    setActiveMenu(null);
    setHoverSubMenu(null);
  };

  useEffect(() => {
    const onKey = (e) => {
      if (e.key === "Escape") setRestrictOpen(false);
    };
    if (restrictOpen) window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [restrictOpen]);
  useEffect(() => {
    let width = 80; // Menu1
    if (activeMenu && SidebarData[activeMenu]?.subMenu) {
      width += 160; // Menu2
      if (hoverSubMenu && SidebarData[activeMenu].subMenu[hoverSubMenu]?.subMenu) {
        width += 160; // Menu3
      }
    }
    setSidebarWidth(width);
  }, [activeMenu, hoverSubMenu, setSidebarWidth]);

  return (
    <div className={`sidebar ${
    activeMenu && SidebarData[activeMenu]?.subMenu
      ? "expanded"
      : "collapsed"
  }`}>
      {/* Navbar */}
      <div className="navbar">
        <Link to="/" className="nav-left flex items-center gap-2 px-4 py-3 ">
          <img
            className="brand-logo cursor-pointer"
            src="https://upload.wikimedia.org/wikipedia/commons/7/7e/Standard_Chartered_Logo_%282021%2C_Logo_only%29.svg"
            alt="SC Logo"
          />
          <span className="brand-name">
            <h3>
              Standard <br /> Chartered
            </h3>
          </span>
        </Link>
        <div className="navbar-right">
          <MdLogout
            size={30}
            color="white"
            className="nav-icon cursor-pointer"
            onClick={onLogout}
          />
        </div>
      </div>

      {/* Main Menu */}
      <div className="col main-col">
        {Object.entries(SidebarData).map(([menuKey, menuVal]) => (
          <div
            key={menuKey}
            className={`menu-item vertical ${
              activeMenu === menuKey ? "active" : ""
            }`}
            onClick={() => {
              if (!checkAccess(menuKey)) {
                setRestrictMsg(
                  `🚫 You are restricted from accessing "${menuKey}"!`
                );
                setRestrictOpen(true);
                return;
              }
              setActiveMenu(activeMenu === menuKey ? null : menuKey);
            }}
          >
            <span className="icon big">{menuVal.icon}</span>
            <span>{menuKey}</span>
          </div>
        ))}
      </div>

      {/* Sub Menu */}
      {activeMenu && SidebarData[activeMenu]?.subMenu && (
        <div className="col-2 sub-col">
          {Object.entries(SidebarData[activeMenu].subMenu).map(
            ([subKey, subVal]) => (
              <div
                key={subKey}
                className={`menu-item-2 vertical ${
                  hoverSubMenu === subKey ? "active" : ""
                }`}
                onMouseEnter={(e) => {
                  setHoverSubMenu(subKey);
                  setBoxTop(e.currentTarget.offsetTop);
                }}
                onClick={() => handleClick(activeMenu, subKey)}
              >
                <span className="icon">{subVal.icon}</span>
                <span>{subKey}</span>
              </div>
            )
          )}
        </div>
      )}

      {/* Third Level Menu */}
      {activeMenu &&
        hoverSubMenu &&
        SidebarData[activeMenu]?.subMenu?.[hoverSubMenu]?.subMenu && (
          <div className="submenu-box" style={{ top: boxTop }}>
            {Object.entries(
              SidebarData[activeMenu].subMenu[hoverSubMenu].subMenu
            ).map(([thirdKey, thirdVal]) => (
              <div
                key={thirdKey}
                className="menu-item-3 vertical leaf"
                onClick={() => handleClick(activeMenu, hoverSubMenu, thirdKey)}
              >
                <span className="icon">{thirdVal}</span>
                <span>{thirdKey}</span>
              </div>
            ))}
          </div>
        )}

      {/* Restriction Modal */}
      {restrictOpen && (
        <div className="modal-overlay" onClick={() => setRestrictOpen(false)}>
          <div className="modal-card" onClick={(e) => e.stopPropagation()}>
            <h3 className="modal-title">Access Restricted</h3>
            <p className="modal-text">{restrictMsg}</p>
            <div className="modal-actions">
              <button
                className="modal-btn"
                onClick={() => setRestrictOpen(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Sidebar;


import {
    MdAccountBalance,MdOutlineManageAccounts,MdAttachMoney,MdOutlineSwapHoriz,MdSettings,MdPerson,MdAdd,MdEdit,MdGroup,MdCreate,MdViewList,MdCheckCircle,MdPending,
    MdError,MdDownload,MdFilterList,MdSummarize, MdPassword,MdSupervisorAccount,
  } from "react-icons/md";
  import{
    Key,
    Users,
    UserCog,
    UserPlus
  } from 'lucide-react';
  
  export const SidebarData = {
    Accounts: {
      icon: <MdAccountBalance />,
      subMenu: {
        "View Account": {
          icon: <MdOutlineManageAccounts />,
          subMenu: {
            "Account Details": <MdPerson />,
            "Service Request": <MdGroup />,
            Employees: <MdGroup />,
          },
        },
        "Add Account": {
          icon: <MdAdd />,
          subMenu: {
            "Change Account":<MdOutlineManageAccounts /> ,
            "Edit Account": <MdEdit />,
            "Edit Employee Accounts": <MdEdit />,
          },
        },
      },
    },
    Cash: {
      icon: <MdAttachMoney />,
      subMenu: {
        Create: {
          icon: <MdCreate />,
          subMenu: {
            Payroll: <MdCreate />,
            "Rolled Payees": <MdGroup />,
            Drafts: <MdCreate />,
            "Quick Currency Calculator": <MdCreate />,
          },
        },
        Manage: {
          icon: <MdViewList />,
          subMenu: {
            "Make Approvers": <MdGroup />,
            "View Rolled Payees": <MdGroup />,
          },
        },
        Approver: {
          icon: <MdCheckCircle />,
          subMenu: {
            "Approved Payees": <MdCheckCircle />,
            "Pending Payees": <MdPending />,
          },
        },
      },
    },
    Transactions: {
      icon: <MdOutlineSwapHoriz />,
      subMenu: {
        "Payees Rolled": {
          icon: <MdGroup />,
          subMenu: {
            "Failed Transactions": <MdError />,
            "Successful Transactions": <MdCheckCircle />,
            "Hold Transactions": <MdPending />,
          },
        },
        "E-Statements": {
          icon: <MdDownload />,
          subMenu: {
            "Filter Transactions": <MdFilterList />,
            "Download Transactions": <MdDownload />,
            "Transactions Summary": <MdSummarize />,
          },
        },
      },
    },
    Settings: {
      icon: <MdSettings />,
      subMenu: {
        "Change Password": {icon:<Key/>},
        "View Approvers":  {icon:<Users/>},
        "View Managers":  {icon:<UserCog/>},
        "View Creators":  {icon:<UserPlus/>},
      },
    },
  };
  
  

import React from "react";
import "../Styles/AccountDetails.css";

export default function AccountDetails() {

//const account;
  return (
    <div className="account-card">
      <h3>Account Details</h3>
      <p><strong>Account No:</strong></p>
      <p><strong>IFSC:</strong></p>
      <p><strong>Bank:</strong></p>
      <p><strong>Branch:</strong> </p>
      <p><strong>Currency:</strong></p>
      <p><strong>Country:</strong></p>
    </div>
  );
}

import React, { useState } from "react";
import "../Styles/ChangeAccount.css";

export default function ChangeAccount() {
  const [form, setForm] = useState({
    ifsc: "",
    accountNumber: "",
    bankName: "",
    branch: "",
  });

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = () => {
    console.log("Form Data:", form);
  };

  return (
    <div className="form-wrapper">
      <div className="card">
        <h2>Add Bank Account</h2>
        <div className="form-row">
          <div className="form-group">
            <label>IFSC Code</label>
            <input
              type="text"
              name="ifsc"
              value={form.ifsc}
              onChange={handleChange}
              placeholder="Enter IFSC"
            />
          </div>
          <div className="form-group">
            <label>Account Number</label>
            <input
              type="text"
              name="accountNumber"
              value={form.accountNumber}
              onChange={handleChange}
              placeholder="Enter Account Number"
            />
          </div>
          <div className="form-group">
            <label>Bank Name</label>
            <input
              type="text"
              name="bankName"
              value={form.bankName}
              onChange={handleChange}
              placeholder="Enter Bank Name"
            />
          </div>
          <div className="form-group">
            <label>Branch</label>
            <input
              type="text"
              name="branch"
              value={form.branch}
              onChange={handleChange}
              placeholder="Enter Branch"
            />
          </div>
        </div>
        <div className="button-container">
          <button className="btn" onClick={handleSubmit}>
            Add Account
          </button>
        </div>
      </div>
    </div>
  );
}


import React, { useState } from "react";
import axios from "axios";
import "../Styles/ChangePassword.css";

export default function ChangePassword() {
  const [password, setPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();

    if (newPassword !== confirmPassword) {
      setMessage("❌ New password and confirm password do not match.");
      return;
    }

    const requestData = {
      oldPassword: password,
      newPassword: newPassword,
    };

    // API call (for now just simulate)
    axios
      .post("http://localhost:8080/api/change-password", requestData)
      .then(() => {
        setMessage("✅ Password changed successfully!");
        setPassword("");
        setNewPassword("");
        setConfirmPassword("");
      })
      .catch(() => {
        setMessage("❌ Failed to change password. Try again.");
      });
  };

  return (
    <div className="change-password-container">
      <h2>Change Password</h2>
      <form className="change-password-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Current Password</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label>New Password</label>
          <input
            type="password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label>Confirm New Password</label>
          <input
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
        </div>

        <button type="submit" className="submit-btn">
          Update Password
        </button>
      </form>

      {message && <p className="status-msg">{message}</p>}
    </div>
  );
}

import React, { useState, useEffect } from "react";
import "../Styles/EditAccount.css"; // reuse CSS

export default function EditAccount({ accountId }) {
  const [form, setForm] = useState({
    ifsc: "",
    accountNumber: "",
    bankName: "",
    branch: "",
  });

  const [loading, setLoading] = useState(true);

  // Fetch account details when component loads
  useEffect(() => {
    async function fetchAccount() {
      try {
        const res = await fetch(`http://localhost:8080/api/accounts/${accountId}`);
        const data = await res.json();

        // Prefill form with backend response
        setForm({
          ifsc: data.ifsc || "",
          accountNumber: data.accountNumber || "",
          bankName: data.bankName || "",
          branch: data.branch || "",
        });
        setLoading(false);
      } catch (err) {
        console.error("Error fetching account:", err);
        setLoading(false);
      }
    }

    fetchAccount();
  }, [accountId]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async () => {
    try {
      const res = await fetch(`http://localhost:8080/api/accounts/${accountId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
      if (res.ok) {
        alert("Account updated successfully ✅");
      }
    } catch (err) {
      console.error("Error updating account:", err);
    }
  };

  if (loading) {
    return <div className="form-wrapper"><div className="card"><p>Loading account details...</p></div></div>;
  }

  return (
    <div className="form-wrapper">
      <div className="card">
        <h2>Edit Bank Account</h2>
        <div className="form-row">
          <div className="form-group">
            <label>IFSC Code</label>
            <input
              type="text"
              name="ifsc"
              value={form.ifsc}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label>Account Number</label>
            <input
              type="text"
              name="accountNumber"
              value={form.accountNumber}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label>Bank Name</label>
            <input
              type="text"
              name="bankName"
              value={form.bankName}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label>Branch</label>
            <input
              type="text"
              name="branch"
              value={form.branch}
              onChange={handleChange}
            />
          </div>
        </div>
        <div className="button-container">
          <button className="btn" onClick={handleSubmit}>
            Update Account
          </button>
        </div>
      </div>
    </div>
  );
}

import React, { useState } from "react";
import "../Styles/EditEmployeeAccounts.css";

export default function EditEmployeeAccounts() {
  // Dummy employees (replace with API later)
  const dummyEmployees = [
    {
      empId: "101",
      name: "John Doe",
      email: "john@example.com",
      accountNumber: "1234567890",
      ifsc: "IFSC00123",
      currency: "INR",
      country: "India",
    },
    {
      empId: "102",
      name: "Jane Smith",
      email: "jane@example.com",
      accountNumber: "9876543210",
      ifsc: "IFSC00456",
      currency: "USD",
      country: "USA",
    },
  ];

  const [searchId, setSearchId] = useState("");
  const [employee, setEmployee] = useState(null);

  const handleSearch = () => {
    const found = dummyEmployees.find((emp) => emp.empId === searchId);
    if (found) {
      setEmployee(found);
    } else {
      alert("Employee not found ❌");
      setEmployee(null);
    }
  };

  const handleChange = (e) => {
    setEmployee({ ...employee, [e.target.name]: e.target.value });
  };

  const handleUpdate = () => {
    alert("Employee updated ✅ (local only for now)");
    console.log("Updated Employee:", employee);

    // ✅ Close form after update
    setEmployee(null);
    setSearchId("");
  };

  return (
    <div className="form-wrapper">
      <div className="card">
        <h2>Edit Employee Account</h2>

        {/* Search Section */}
        <div className="search-bar">
          <input
            type="text"
            placeholder="Enter Employee ID"
            value={searchId}
            onChange={(e) => setSearchId(e.target.value)}
          />
          <button className="btn" onClick={handleSearch}>
            Search
          </button>
        </div>

        {/* Form Section */}
        {employee && (
          <>
            <div className="form-row">
              <div className="form-group">
                <label>Employee ID</label>
                <input type="text" name="empId" value={employee.empId} disabled />
              </div>
              <div className="form-group">
                <label>Name</label>
                <input type="text" name="name" value={employee.name} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label>Email</label>
                <input type="email" name="email" value={employee.email} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label>Account Number</label>
                <input
                  type="text"
                  name="accountNumber"
                  value={employee.accountNumber}
                  onChange={handleChange}
                />
              </div>
              <div className="form-group">
                <label>IFSC</label>
                <input type="text" name="ifsc" value={employee.ifsc} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label>Currency</label>
                <input
                  type="text"
                  name="currency"
                  value={employee.currency}
                  onChange={handleChange}
                />
              </div>
              <div className="form-group">
                <label>Country</label>
                <input
                  type="text"
                  name="country"
                  value={employee.country}
                  onChange={handleChange}
                />
              </div>
            </div>
            <div className="button-container">
              <button className="btn" onClick={handleUpdate}>
                Update Employee
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
}


import React, { useState } from "react";
import { Outlet, useNavigate } from "react-router-dom";
import Sidebar from "../Components/Sidebar";
import "../Styles/layout.css";

const Layout = ({ role }) => {
  // Track sidebar width dynamically
  const [sidebarWidth, setSidebarWidth] = useState(80); // default = menu1 width
  const navigate = useNavigate();
  const handleLogout = () => {
    localStorage.removeItem("role"); // clear role
    navigate("/login"); // redirect
  };

  return (
    <div className="layout-container">
      {/* Sidebar */}
      <Sidebar role={role} setSidebarWidth={setSidebarWidth} onLogout={handleLogout} />

      {/* Main content */}
      <div
        className="layout-content"
        style={{
          marginLeft: `${sidebarWidth+40}px`,
          transition: "margin-left 0.3s ease",
          flex: 1,
          padding: "20px",
        }}
      >
        <Outlet />
      </div>
    </div>
  );
};

export default Layout;



import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

function Login({ onLogin }) {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();

    let role = "creator"; // default
    if (username === "approver@gmail.com") role = "approver";
    else if (username === "manager@gmail.com") role = "manager";

    onLogin(role);
    navigate("/view-account");
  };

  return (
    <div className="login-container">
      <form className="login-form" onSubmit={handleSubmit}>
        <h2>Login</h2>
        <label>Email</label>
        <input
          type="email"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="Enter your email"
        />
        <label>Password</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Enter your password"
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default Login;


import React, { useState } from "react";
import axios from "axios";
import "../Styles/ServiceRequest.css";

export default function ServiceRequest() {
  const [empId, setEmpId] = useState("");
  const [subject, setSubject] = useState("");
  const [description, setDescription] = useState("");
  const [statusMessage, setStatusMessage] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();

    const requestData = {
      empId,
      subject,
      description,
    };

    // Send to backend (no backend yet -> just console)
    axios
      .post("http://localhost:8080/api/service-requests", requestData)
      .then((res) => {
        setStatusMessage("✅ Request submitted successfully!");
        setEmpId("");
        setSubject("");
        setDescription("");
      })
      .catch((err) => {
        console.error("Error submitting request:", err);
        setStatusMessage("❌ Failed to submit request. Try again.");
      });
  };

  return (
    <div className="service-request-container">
      <h2>Service Request</h2>
      <form className="service-request-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Employee ID</label>
          <input
            type="text"
            value={empId}
            onChange={(e) => setEmpId(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label>Subject</label>
          <input
            type="text"
            value={subject}
            onChange={(e) => setSubject(e.target.value)}
            placeholder="Eg. Salary not credited"
            required
          />
        </div>

        <div className="form-group">
          <label>Description</label>
          <textarea
            rows="4"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Explain the issue..."
            required
          ></textarea>
        </div>

        <button type="submit" className="submit-btn">
          Submit Request
        </button>
      </form>

      {statusMessage && <p className="status-msg">{statusMessage}</p>}
    </div>
  );
}

import React, { useEffect, useState } from "react";
import axios from "axios";
import "../Styles/ViewEmployees.css";

export default function ViewEmployees() {
  const [employees, setEmployees] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    // Fetch employees from backend
    axios
      .get("url") // 👈 your backend API
      .then((res) => {
        setEmployees(res.data);
      })
      .catch((err) => {
        console.error("Error fetching employees:", err);
      });
  }, []);

  // Filter employees by ID, Name, or Email
  const filteredEmployees = employees.filter(
    (emp) =>
      emp.empId.toString().toLowerCase().includes(search.toLowerCase()) ||
      emp.name.toLowerCase().includes(search.toLowerCase()) ||
      emp.email.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="employee-table-container">
      <h2>Employees</h2>

      <input
        type="text"
        placeholder="Search by ID, Name or Email"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="search-input"
      />

      <div className="table-card">
        <table className="employee-table">
          <thead>
            <tr>
              <th>Emp ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Country</th>
              <th>Currency</th>
            </tr>
          </thead>
          <tbody>
            {filteredEmployees.length > 0 ? (
              filteredEmployees.map((emp) => (
                <tr key={emp.empId}>
                  <td>{emp.empId}</td>
                  <td>{emp.name}</td>
                  <td>{emp.email}</td>
                  <td>{emp.country}</td>
                  <td>{emp.currency}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="5" className="no-data">
                  ❌ No employees found
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

.account-card {
  background: #f9f9f9;
  border: 2px solid #0d47a1;
  border-radius: 12px;
  padding: 20px;
  width: 320px;
  margin: 20px auto;
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
}

.account-card h3 {
  color: #0d47a1;
  margin-bottom: 15px;
  text-align: center;
}

.account-card p {
  margin: 6px 0;
  font-size: 15px;
}

/

.form-wrapper {
  margin: 0;
  font-family: "Segoe UI", sans-serif;
  display: flex;
  justify-content: center;
  align-items: start;
  height: 100vh;
}

.card {
  background: #fff;
  border-radius: 16px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  padding: 30px;
  max-width: 1000px;
  width: 90%;
}

.card h2 {
  text-align: center;
  color: #0d47a1;
  margin-bottom: 25px;
}

.form-row {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group label {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 6px;
}

.form-group input {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
  outline: none;
  transition: border 0.3s, box-shadow 0.3s;
}

.form-group input:focus {
  border-color: #1565c0;
  box-shadow: 0 0 5px rgba(21, 101, 192, 0.5);
}

.button-container {
  display: flex;
  justify-content: center;
  margin-top: 30px;
}

.btn {
  background: #0d47a1;
  color: #fff;
  border: none;
  padding: 12px 32px;
  font-size: 16px;
  font-weight: 600;
  border-radius: 10px;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.btn:hover {
  background: #1565c0;
  transform: translateY(-2px);
}

/* Responsive */
@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 480px) {
  .form-row {
    grid-template-columns: 1fr;
  }
}

/
.change-password-container {
  width: 50%;
  margin: 30px auto;
  background: #ffffff;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.change-password-container h2 {
  text-align: center;
  color: #0d47a1;
  margin-bottom: 20px;
}

.change-password-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.form-group {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.form-group label {
  margin-bottom: 5px;
  font-weight: bold;
  color: #1565c0;
}

.form-group input {
  width: 90%;
  padding: 10px;
  border: 1px solid #1565c0;
  border-radius: 6px;
  font-size: 14px;
}

.submit-btn {
  background: #0d47a1;
  color: white;
  border: none;
  padding: 12px;
  font-size: 15px;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.submit-btn:hover {
  background: #1565c0;
}

.status-msg {
  margin-top: 15px;
  text-align: center;
  font-weight: bold;
}
/
.app {
  display: flex;
  height: 100vh;
  font-family: "Segoe UI", sans-serif;
}

.sidebar {
  display: flex;
  background: #0d47a1;
  border-right: 1px solid #ddd;
  height: 100%;
  position: fixed;
  margin-top: 70px;
}

.col {
  display: flex;
  flex-direction: column;
  width:100px;
  border-right: 1px solid #eee;
  padding: 10px;
 
}

.main-col {
  background: #0d47a1;
  color:#fff;
  
}

.sub-col {
  background: #0d47a1;
  color:#fff;
}

.menu-item.vertical {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 6px;
 
}

.menu-item:hover {
  background: #083579;
  
}

.menu-item.active {
  background: #083579;
  font-weight: 600;
}

.menu-item.leaf {
  font-size: 14px;
}

.menu-item.vertical .icon {
  font-size: 18px;
  color: #fff;
}
.menu-item.vertical .label{
  font-size: 14px;

}

.icon.big {
  font-size: 22px;  /* Bigger for main menus */
}
.sidebar .main-col .menu-item {
 
  display: flex;
  flex-direction: column;   /* icon on top, text below */
  align-items: center;
  justify-content: center;
  padding: 15px 10px;
  cursor: pointer;
  border-bottom: 1px solid #dcdcdc;  /* divider line */
  transition: background 0.3s;
  
}

.sidebar .main-col .menu-item:last-child {
  border-bottom: none;  /* no divider after last item */
}

.sidebar .main-col .menu-item.active {
 /* highlight */
  font-weight: bold;
  border-left: 3px solid #004aad; /* bank blue accent */
}

.sidebar .main-col .menu-item .icon {
  font-size: 22px;
  margin-bottom: 6px;
}
.sidebar .sub-col .menu-item,
.sidebar .hover-col .menu-item {
  display: flex;
  flex-direction: row;   /* icon beside text */
  align-items: center;
  padding: 10px 12px;
  cursor: pointer;
  border-bottom: 1px solid #f0f0f0;
  transition: background 0.3s;
  
}

.sidebar .sub-col .menu-item:hover,
.sidebar .hover-col .menu-item:hover {
  background: #f5f5f5;
}

.sidebar .sub-col .menu-item .icon,
.sidebar .hover-col .menu-item .icon {
  font-size: 18px;
  margin-right: 8px;
}

.menu-item-2.vertical {
  display: flex;
  align-items: center;
  padding:8px 12px;
  gap: 8px;
  cursor:pointer;
  width:200px;
 
}

.menu-item-2:hover {
  background: #083579;
 
}

.menu-item-2.vertical .icon {
  font-size: 18px;
  color: #fff;
}
.menu-item-2.vertical .label{
  font-size: 14px;

}
.submenu-box{
  position:absolute;
  left: 320px;
  top:0;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 6px;
  box-shadow:0 4px 8px rgba(0,0,0,0.1);
  padding:8px;
  min-width: 180px;
  z-index: 1000;
}
.submenu-box::before{
  content:"";
  position: absolute;
  left:-15px;
  top:20px;
  border-width: 8px;
  border-style: solid;
  border-color: transparent #fff transparent transparent;
  filter:drop-shadow(-1px 1px 1px rgba(0,0,0,0.1));

}
.menu-item-3.vertical {
  display: flex;
  align-items: center;
  padding:8px 12px;
  gap: 8px;
  cursor:pointer;
  width:200px;
  color:#0d47a1;
 
}

.menu-item-3:hover{
  font-size: 15px;
  width:calc(100% -28px);
}
.menu-item-3 .vertical .icon:hover{
  color:#fff;
}

.menu-item-3.vertical .icon {
  font-size: 18px;
  color: #0d47a1;
}
.menu-item-3.vertical .label{
  font-size: 14px;

}
.sidebar{
  margin-top: 90px;
}


/* 🔹 Navbar */
.navbar {
  position: fixed;
  top:0;
  left:0;
  right:0;
  width: 100vw; 
  height: 90px;  /* Bigger height */
  background: linear-gradient(90deg, #0d47a1, #1565c0); /* SCB-style gradient */
  display: flex;
  align-items: center;
  justify-content: space-between; /* icons to right */
  padding: 0 30px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.25);
  z-index: 1000;
  box-sizing: border-box;
}
.nav-left{
  
  display: flex;
  align-items: center;
  gap:15px;
  cursor: pointer;

}
.brand-logo{
  height: 60px;
  width:50px;
}
.brand-name{
  font-size: 22px;
  font-weight: 400;
  color:white;
}
.navbar-right{
  display: flex;
  align-items: center;  
  
}
.nav-icon{
  cursor: pointer;
  transition:transform 0.2s ease;
}
.nav-icon:hover{
  transform:scale(1.1);
}

/* 🔹 Push sidebar below navbar */
.sidebar {
  margin-top: 90px;  /* Same as navbar height */
  background: #1565c0;
  min-height: 100vh;
  box-shadow: 2px 0 6px rgba(0,0,0,0.2);
}

.main-content{
  margin-left: 200px;
  padding:70px;

}
.brand-name{
  color: #ffffffef;
  cursor: pointer;
}

/* ===== Centered Modal ===== */
.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.45);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000; /* above navbar (1000) and menus */
}

.modal-card {
  background: #ffffff;
  width: min(92vw, 420px);
  border-radius: 14px;
  box-shadow: 0 20px 60px rgba(0,0,0,0.25);
  padding: 20px 22px;
  text-align: center;
}

.modal-title {
  margin: 0 0 8px 0;
  font-size: 20px;
  font-weight: 700;
  color: #0d47a1;
}

.modal-text {
  margin: 0 0 16px 0;
  font-size: 15px;
  color: #333;
}

.modal-actions {
  display: flex;
  justify-content: center;
}

.modal-btn {
  background: #0d47a1;
  color: #fff;
  border: none;
  border-radius: 10px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
}

.modal-btn:hover {
  filter: brightness(1.05);
}
/* Remove underline from brand-name link */
.nav-left, 
.nav-left a, 
.brand-name, 
.brand-name a {
  text-decoration: none !important;
  color: white;
}

.brand-name h3 {
  margin: 0; /* remove extra spacing */
  line-height: 1.2;
  font-weight: 700;
}
/* Sidebar: occupies space in flex, not overlap */
/* Sidebar: sits in flex row */
.sidebar {
  height: calc(100vh - 90px); /* below navbar */
  margin-top: 90px;
  background: #0d47a1;
  transition: width 0.3s ease;
  overflow: visible;   /* allow hover menus to show */
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  overflow: visible;        /* higher than content */
}


/* Default width: only main-col */
.sidebar.collapsed {
  width: 100px;
}

/* Expanded width: main-col + sub-col */
.sidebar.expanded {
  width: 300px; /* adjust based on your sub menu width */
}

/* Main content auto-adjusts */
.layout-content {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
  transition: margin-left 0.3s ease;
  background: #f9f9f9;
  min-height: 100vh;/* lower than sidebar/menus */
}

.submenu-box {
  position: absolute;
  top: 0;
  left: 100%;           /* appear to the right of submenu */
  width: 220px;
  background: #fff;
  color: white;
  transition: all 0.3s ease;
  z-index: 20;          /* keep above main content */
  box-shadow: 2px 2px 8px rgba(0,0,0,0.2);
}
.layout {
  display: flex;
  flex-direction: row;
  height: 100vh;
}
.layout.sidebar-collapsed .layout-content {
  margin-left: 80px;
}

/* When sidebar is expanded */
.layout.sidebar-expanded .layout-content {
  margin-left: 250px;
}
/
.form-wrapper {
  margin: 0;
  font-family: "Segoe UI", sans-serif;
  display: flex;
  justify-content: center;
  align-items: start;
  height: 100vh;
}

.card {
  background: #fff;
  border-radius: 16px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  padding: 30px;
  max-width: 1000px;
  width: 90%;
}

.card h2 {
  text-align: center;
  color: #0d47a1;
  margin-bottom: 25px;
}

.form-row {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group label {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 6px;
}

.form-group input {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
  outline: none;
  transition: border 0.3s, box-shadow 0.3s;
}

.form-group input:focus {
  border-color: #1565c0;
  box-shadow: 0 0 5px rgba(21, 101, 192, 0.5);
}

.button-container {
  display: flex;
  justify-content: center;
  margin-top: 30px;
}

.btn {
  background: #0d47a1;
  color: #fff;
  border: none;
  padding: 12px 32px;
  font-size: 16px;
  font-weight: 600;
  border-radius: 10px;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.btn:hover {
  background: #1565c0;
  transform: translateY(-2px);
}

/* Responsive */
@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 480px) {
  .form-row {
    grid-template-columns: 1fr;
  }
}
/
.form-wrapper {
  margin: 0;
  font-family: "Segoe UI", sans-serif;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  min-height: 100vh;
  padding-top: 40px;
}

.card {
  background: #fff;
  border-radius: 16px;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  padding: 30px;
  max-width: 1200px;
  width: 90%;
}

.card h2 {
  text-align: center;
  color: #0d47a1;
  margin-bottom: 25px;
}

.search-bar {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.search-bar input {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 8px 0 0 8px;
  outline: none;
  width: 250px;
}

.search-bar .btn {
  border-radius: 0 8px 8px 0;
}

.form-row {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group label {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin-bottom: 6px;
}

.form-group input {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
  outline: none;
  transition: border 0.3s, box-shadow 0.3s;
}

.form-group input:focus {
  border-color: #1565c0;
  box-shadow: 0 0 5px rgba(21,101,192,0.5);
}

.button-container {
  display: flex;
  justify-content: center;
  margin-top: 30px;
}

.btn {
  background: #0d47a1;
  color: #fff;
  border: none;
  padding: 12px 32px;
  font-size: 16px;
  font-weight: 600;
  border-radius: 10px;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.btn:hover {
  background: #1565c0;
  transform: translateY(-2px);
}

@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 480px) {
  .form-row {
    grid-template-columns: 1fr;
  }
}
/
/* Container for sidebar + content */
.layout-container {
  display: flex;
  width: 100%;
  height: 100vh;
  overflow: hidden;
}

/* Sidebar stays fixed width but can expand/collapse */
.sidebar {
  flex-shrink: 0;              /* don’t let it overlap content */
  height: 100vh;
  transition: width 0.3s ease; /* smooth expand/collapse */
  z-index: 2;                  /* keep menus above content */
}

/* Main content takes the rest of the space */
.layout-content {
  flex: 1;                     /* fill remaining width */
  overflow-y: auto;
  padding: 20px;
  transition: all 0.3s ease;
  background: #f9f9f9;          /* optional */
  z-index: 1;  
  margin-left: 300px;   
  margin-top: 100px;             /* content below menus */
}
/
.service-request-container {
  width: 60%;
  margin: 20px auto;
  background: #ffffff;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.service-request-container h2 {
  color: #0d47a1;
  margin-bottom: 15px;
  text-align: center;
}

.service-request-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.form-group {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.form-group label {
  font-weight: bold;
  margin-bottom: 5px;
  color: #1565c0;
}

.form-group input,
.form-group textarea {
  width: 90%;
  padding: 10px;
  border: 1px solid #1565c0;
  border-radius: 6px;
  font-size: 14px;
}

.submit-btn {
  background: #0d47a1;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 15px;
  transition: 0.3s ease;
}

.submit-btn:hover {
  background: #1565c0;
}

.status-msg {
  margin-top: 15px;
  text-align: center;
  font-weight: bold;
}
/
.employee-table-container {
  width: 90%;
  margin: 20px auto;
  text-align: center;
}

.employee-table-container h2 {
  color: #0d47a1;
  margin-bottom: 15px;
}

.search-input {
  padding: 8px 12px;
  width: 250px;
  border: 1px solid #1565c0;
  border-radius: 6px;
  margin-bottom: 20px;
}

.table-card {
  background: #ffffff;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  overflow-x: auto;
}

.employee-table {
  width: 100%;
  border-collapse: collapse;
}

.employee-table th,
.employee-table td {
  padding: 12px;
  border-bottom: 1px solid #ddd;
  text-align: left;
}

.employee-table th {
  background-color: #0d47a1;
  color: white;
}

.employee-table tr:hover {
  background-color: #f1f5ff;
  cursor: pointer;
}

.no-data {
  text-align: center;
  padding: 15px;
  color: #777;
}


import React, { useState, useEffect } from "react";
import { Navigate } from "react-router-dom";

// Reusable ProtectedRoute
const ProtectedRoute = ({ role, allowedRoles, children }) => {
  const [restricted, setRestricted] = useState(false);

  useEffect(() => {
    if (!allowedRoles.includes(role)) {
      setRestricted(true);
    }
  }, [role, allowedRoles]);

  if (restricted) {
    return (
      <div className="modal-overlay">
        <div className="modal-card">
          <h3 className="modal-title">Access Restricted</h3>
          <p className="modal-text">🚫 You are restricted from accessing this page!</p>
          <div className="modal-actions">
            <a className="modal-btn" href="/">Close</a>
          </div>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

