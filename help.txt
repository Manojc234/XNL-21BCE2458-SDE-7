import { html, LitElement, css } from "lit";
import { createContext, contexts } from "@scdevkit/data";

const graphQLClientContext = createContext(contexts.GRAPHQL_CLIENT);

export class Grid extends LitElement {
  static styles = css`
    :host {
      display: flex;
      justify-content: center;
      padding: 1rem;
    }
    sc-table{
      width: 100%;
      max-width: 1000px;
    }
  `;

  static properties = {
    rows: { type: Array },
  };

  constructor() {
    super();
    this.rows = [];
  }

  _graphQLClientContextConsumer = graphQLClientContext.createConsumer(this);

  connectedCallback() {
    super.connectedCallback();
    this.fetchData();
  }

  async fetchData() {
    const graphQLClient = this._graphQLClientContextConsumer.value;
    console.log("GraphQL Client:",graphQLClient);
    let response;

    try {
      const response = await graphQLClient.query( `{
        show {
          id
          name
          email
          dob
          gender
          pno
        }
      }
    `);
      const result=await response.json();
      console.log(result);
      const rowsArray=result.data;
      console.log(rowsArray);
      this.rows=rowsArray.show;
      
    } catch (err) {
      console.error("GraphQL query failed:", err);
    }
  }
  async updateRow(row) {
    const graphQLClient = this._graphQLClientContextConsumer.value;
    // Here you could open a modal/form to edit row data; for demo we'll just append " (Edited)"
    const updated = {
      ...row,
      name: row.name + " (Edited)"
    };

    const mutation = `
      mutation {
        updateDetails(id: ${row.id}, details: {
          name: "${updated.name}"
          email: "${updated.email}"
          dob: "${updated.dob}"
          gender: "${updated.gender}"
          pno: "${updated.pno}"
        }) {
          id
          name
          email
          dob
          gender
          pno
        }
      }
    `;
    try {
      await graphQLClient.query(mutation);
      this.fetchData(); 
    } catch (err) {
      console.error("Update failed:", err);
    }
  }

  async deleteRow(row) {
    const graphQLClient = this._graphQLClientContextConsumer.value;
    const mutation = `
      mutation {
        deleteDetails(id: "${row.id}")
      }
    `;
    try {
      await graphQLClient.query(mutation);
      this.fetchData(); 
    } catch (err) {
      console.error("Delete failed:", err);
    }
  }

  render() {
    const conf=[
          { property: "name", header: "Name" },
          { property: "email", header: "Email" },
          { property: "dob", header: "Date of Birth" },
          { property: "gender", header: "Gender" },
          { property: "pno", header: "Phone Number" },
          {
            header:"Actions",
            cell:(rows)=>html`<sc-button @click="${() => this.updateRow(rows)}">Edit</sc-button>
                          <sc-button @click="${() => this.deleteRow(rows)}">Delete</sc-button> `

          }
        
      ];
    return html`
      <sc-table
      .conf=${conf} .data=${this.rows}
       page-size="" sort=""
      >
      </sc-table>
    `;
  }
}

