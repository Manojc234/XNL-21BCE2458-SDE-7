import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Styles/custom.css";

import ScLogo from "../assets/ScLogo.jpg";
import Logout from "../assets/Logout.png";
import user from "../assets/user.jpg";

import { MdAccountBalance, MdOutlineManageAccounts } from "react-icons/md";
import {
  FaMoneyCheckAlt, FaChevronRight, FaChevronDown, FaLock, FaUserShield,
  FaUserTie, FaPlusCircle, FaUserEdit, FaUserPlus, FaCalculator, FaFileAlt,
  FaDownload, FaListUl, FaCheck, FaTimes, FaClipboardList, FaCheckSquare
} from "react-icons/fa";

function Dashboard({ role = "operator" }) {
  const [openTop, setOpenTop] = useState(null); // ✅ active 1st layer
  const [hoverSection, setHoverSection] = useState(null); // ✅ hovered 2nd layer
  const [selectedPath, setSelectedPath] = useState([]);
  const [collapsed, setCollapsed] = useState(false); // ✅ collapse toggle

  const MENU = [
    {
      key: "accounts",
      label: "Accounts",
      icon: <MdAccountBalance />,
      sections: [
        {
          key: "current",
          label: "Current Account",
          items: [
            { key: "accDetails", label: "Account Details", icon: <FaFileAlt /> },
            { key: "serviceReq", label: "Service Request", icon: <FaClipboardList /> },
            { key: "employees", label: "Employees", icon: <FaUserTie /> },
          ],
        },
        {
          key: "change",
          label: "Change Account",
          items: [
            { key: "addAcc", label: "Add Account", icon: <FaUserPlus /> },
            { key: "editAcc", label: "Edit Account", icon: <FaUserEdit /> },
            { key: "editEmpAcc", label: "Edit Employee Accounts", icon: <MdOutlineManageAccounts /> },
          ],
        },
      ],
    },
    {
      key: "cash",
      label: "Cash",
      icon: <FaMoneyCheckAlt />,
      sections: [
        {
          key: "create",
          label: "Create",
          roles: ["creator"],
          items: [
            { key: "payroll", label: "Payroll", icon: <FaCheckSquare /> },
            { key: "rolledPayees", label: "Rolled Payees", icon: <FaUserTie /> },
            { key: "drafts", label: "Drafts", icon: <FaFileAlt /> },
            { key: "qcc", label: "Quick Currency Calculator", icon: <FaCalculator /> },
          ],
        },
        {
          key: "manage",
          label: "Manage",
          roles: ["manager"],
          items: [
            { key: "makeApprovers", label: "Make Approvers", icon: <FaUserShield /> },
            { key: "viewRolled", label: "View Rolled Payees", icon: <FaUserTie /> },
          ],
        },
        {
          key: "approve",
          label: "Approve",
          roles: ["approver"],
          items: [
            { key: "approved", label: "Approved Payees", icon: <FaCheck /> },
            { key: "pending", label: "Pending Payees", icon: <FaClipboardList /> },
          ],
        },
      ],
    },
    {
      key: "transactions",
      label: "Transactions",
      icon: <FaListUl />,
      sections: [
        {
          key: "rolled",
          label: "Rolled Payees",
          items: [
            { key: "failed", label: "Failed Transactions", icon: <FaTimes /> },
            { key: "success", label: "Successful Transactions", icon: <FaCheck /> },
            { key: "hold", label: "Hold Transactions", icon: <FaClipboardList /> },
          ],
        },
        {
          key: "estatements",
          label: "E-Statements",
          items: [
            { key: "filter", label: "Filter Transactions", icon: <FaListUl /> },
            { key: "download", label: "Download Transactions", icon: <FaDownload /> },
            { key: "summary", label: "Transactions Summary", icon: <FaFileAlt /> },
          ],
        },
      ],
    },
    {
      key: "settings",
      label: "Settings",
      icon: <FaLock />,
      sections: [
        {
          key: "settingsRoot",
          label: "General",
          items: [
            { key: "changePwd", label: "Change Password", icon: <FaLock /> },
            { key: "viewApprovers", label: "View Approvers", icon: <FaUserShield /> },
            { key: "viewManagers", label: "View Managers", icon: <FaUserTie /> },
            { key: "viewCreates", label: "View Creates", icon: <FaPlusCircle /> },
          ],
        },
      ],
    },
  ];

  const filterSectionsByRole = (top) => {
    if (top.key !== "cash") return top.sections;
    return top.sections.filter(
      (sec) => !sec.roles || sec.roles.includes(role) || role === "operator"
    );
  };

  const onClickFinalItem = (tLabel, sLabel, iLabel) => {
    setSelectedPath([tLabel, sLabel, iLabel]);
  };

  // ✅ Render 3rd layer (hover only)
  const renderThirdPanel = (sec, tLabel) => (
    <div className="third-panel-horizontal">
      {sec.items.map((it) => (
        <div
          key={it.key}
          className="third-item-h"
          onClick={() => onClickFinalItem(tLabel, sec.label, it.label)}
        >
          <span className="me-1">{it.icon}</span>
          {it.label}
        </div>
      ))}
    </div>
  );

  const renderSidebar = () => (
    <>
      <div className="d-flex align-items-center justify-content-between mb-3">
        <img className="logo" src={ScLogo} alt="logo" />
        {!collapsed && <span className="brand-name text-light">Straight2Bank</span>}
      </div>

      {MENU.map((top) => {
        const sections = filterSectionsByRole(top);
        return (
          <div key={top.key} className="top-block border-bottom">
            {/* ✅ Sidebar expand/collapse on click */}
            <button
              className={`top-item ${openTop === top.key ? "active" : ""}`}
              onClick={() => setOpenTop(openTop === top.key ? null : top.key)}
            >
              <span className="me-2">{top.icon}</span>
              {!collapsed && top.label}
              <span className="ms-auto">
                {openTop === top.key ? <FaChevronDown /> : <FaChevronRight />}
              </span>
            </button>

            {/* ✅ 2nd layer shows only if expanded */}
            {openTop === top.key && (
              <div className="second-list-horizontal">
                {sections.map((sec) => (
                  <div
                    key={sec.key}
                    className="second-item-h"
                    onMouseEnter={() => setHoverSection(sec.key)}
                    onMouseLeave={() => setHoverSection(null)}
                  >
                    {sec.label}
                    {/* ✅ 3rd layer by hover */}
                    {hoverSection === sec.key && renderThirdPanel(sec, top.label)}
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </>
  );

  return (
    <div className="d-flex dashboard-container">
      <div className={`bar text-white p-3 ${collapsed ? "collapsed" : ""}`}>
        {renderSidebar()}
      </div>

      <div className="flex-grow-1 d-flex flex-column">
        <nav className="px-3 d-flex justify-content-between align-items-center topbar">
          <div className="userprofile text-light">
            <img className="logo2" src={user} alt="user" /> SCB0334
          </div>
          <img className="logo1" src={Logout} alt="logout" />
        </nav>
        <div className="flex-grow-1 p-4 bg-light">
          {/* ✅ main content */}
          {selectedPath.length === 0 ? (
            <h5 className="text-muted">Welcome to Straight2Bank Dashboard</h5>
          ) : (
            <div>
              <div className="breadcrumbx">{selectedPath.join(" › ")}</div>
              <h4>{selectedPath[selectedPath.length - 1]}</h4>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default Dashboard;

/* Sidebar */
.bar {
  width: 80px;
  background: #004c45; /* ✅ SCB dark green */
  transition: width 0.3s ease;
}
.bar:not(.collapsed) {
  width: 260px; /* ✅ expand on click */
}
.top-item {
  background: transparent;
  border: none;
  color: #fff;
  width: 100%;
  text-align: left;
  padding: 10px;
  font-size: 14px;
  display: flex;
  align-items: center;
  cursor: pointer;
}
.top-block {
  border-bottom: 1px solid rgba(255, 255, 255, 0.2); /* ✅ line divider */
}
.top-item.active {
  background: #006f61; /* ✅ lighter green */
}

/* 2nd layer */
.second-list-horizontal {
  background: #00594d;
  padding: 8px;
}
.second-item-h {
  color: #fff;
  padding: 6px;
  cursor: pointer;
  position: relative;
}
.second-item-h:hover {
  background: #007f70;
}

/* 3rd layer hover panel */
.third-panel-horizontal {
  position: absolute;
  left: 100%;
  top: 0;
  background: #007f70;
  padding: 6px;
  min-width: 200px;
  z-index: 10;
}
.third-item-h {
  padding: 6px;
  color: white;
  cursor: pointer;
}
.third-item-h:hover {
  background: #00a489;
}

