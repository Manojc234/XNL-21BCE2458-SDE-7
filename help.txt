import { Routes, Route, Navigate,BrowserRouter, useNavigate } from "react-router-dom";
import 'bootstrap/dist/css/bootstrap.min.css';
import ChangeAccount from "./pages/ChangeAccount";
import EditAccount from "./pages/EditAccount";
import AccountDetails from "./pages/AccountDetails";
import ViewEmployees from "./pages/ViewEmployees";
import Layout from "./pages/Layout";
import ProtectedRoute from "./Components/ProtectedRoute";
import ChangePassword from "./pages/ChangePassword";
import PaymentForm from "./Components/PaymentForm";
import DraftManagement from "./Components/DraftManagement";
import ApprovePayee from "./pages/ApprovePayee";
import Manager from "./pages/Manager";
import RolledPayees from "./pages/RolledPayees";
import Transactions from "./pages/Transactions";
import Statements from "./pages/Statements";


function App() {
  const role="creator";
  return (
      <BrowserRouter>  
        <Routes>
            <Route path="/" element={<Layout role={role} />}>
              <Route
                path="/add-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <ChangeAccount />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/edit-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <EditAccount />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/view-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <AccountDetails />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/view-employees"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <ViewEmployees />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/change-password"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator", "manager", "approver"]}
                  >
                    <ChangePassword />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/payee-roll"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator"]}
                  >
                    <PaymentForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/drafts"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator"]}
                  >
                    <DraftManagement />
                  </ProtectedRoute>
                }
              />
              <Route
              path="/approvals"
              element={
              <ProtectedRoute role={role} allowedRoles={["approver"]}>
                <ApprovePayee role={role}/>
              </ProtectedRoute>
                }
              />
               <Route
              path="/submits"
              element={
              <ProtectedRoute role={role} allowedRoles={["manager"]}>
                <Manager role={role}/>
              </ProtectedRoute>
                }
              />
               <Route
              path="/payees"
              element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <RolledPayees role={role}/>
              </ProtectedRoute>
                }
              />
              <Route
              path="/transactions"
              element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <Transactions/>
              </ProtectedRoute>
                }
              />
              <Route
              path="/statements"
              element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <Statements/>
              </ProtectedRoute>
                }
              />
            </Route>
        </Routes>
        
      </BrowserRouter>
     
 
  );
}
export default App;

import React from 'react';
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import "./LoginPage.css";

function LoginPage() {
    const navigate = useNavigate();

    return (
        <div className="container-fluid min-vh-100 d-flex flex-column p-0">
            <div className="row header-bar">
                <div className="col-6 header-left"></div>
                <div className="col-6 header-right"></div>
            </div>

            <div className="row justify-content-center mt-3">
                <div className="col-auto">
                    <img src="" className="login-logo" alt="Logo" />
                </div>
            </div>
            <div className="row justify-content-center mt-2">
                <div className="col-12 text-center fw-bold login-title">Welcome to Standard Chartered internal payment system</div>
            </div>
            <div className="row justify-content-center align-items-center flex-grow-1 login-container">
                <div className="col-12 col-md-6 col-lg-4">
                    <div className="card p-4 login-box">
                        <h2 className="text-center">Login</h2>
                        <form>
                            <div className="mb-3 text-start">
                                <label className="form-label">Emp ID</label>
                                <input type="text" className="form-control" name="userid" />
                            </div>
                            <div className="mb-3 text-start">
                                <label className="form-label">Password</label>
                                <input type="password" className="form-control" name="password" />
                            </div>
                            <div className="d-flex justify-content-between mb-3">
                                <button type="button" className="btn btn-link p-0">Forgot Pwd </button>
                                <button type="button" className="btn btn-link p-0" onClick={() => navigate("/signup")}>Sign Up</button>
                            </div>
                            <div className="d-grid">
                                <button type="submit" className="btn btn-primary">Login</button>
                            </div>
                        </form>
                        <div className="text-center mt-3 login-footer">Here For Good</div>
                    </div>
                </div>
            </div>
            <footer className="bg-dark text-white text-center py-2 mt-auto w-100 page-footer">
                Intellectual Property of Standard Chartered Global Business Services
            </footer>
        </div>
    );
}

export default LoginPage;


import React from 'react';
import{ useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import "./SignUpPage.css";

function SignUpPage(){
  const navigate =useNavigate();
  return(
  
    <div className="container-fluid min-vh-100 overflow-hidden d-flex flex-column p-0">
      <div className="row header-bar">
        <div className="col-6 header-left"></div>
        <div className="col-6 header-right"></div>

      </div>
      <div className="row justify-content-center mt-3">
        <div className="col-auto">
          <img src=""className="login-logo"/> 
        </div>
      </div>
      <div className="row justify-content-center mt-2">
        <div className="col-12 text-center fw-bold">Standard Chartered Internal Payment InitationSystem</div>
          
        
      </div>
      <div className="row justify-content-center align-items-center flex-grow-1">
        <div className="col-12 col-md-6 col-lg-4">
          <div className="card p-4">
            <h2 className="text-center">SignUp</h2>
            <form>
              <div className="mb-3 text-start">
                <label className="form-label">Employee ID</label>
                <input type="text" className="form-control" name="employee_id"/>
              </div>
              <div className="mb-3 text-start">
                <label className="form-label">EmailID</label>
                <input type="email" className="form-control" name="email"/>
              </div>
              <div className="mb-3 text-start">
                <label className="form-label">Password</label>
                <input type="password" className="form-control" name="password"/>
              </div>
              <div className="mb-3 text-start">
                <label className="form-label">Re type Password</label>
                <input type="password" className="form-control" name="retype_password"/>
              </div>
              <div className="mb-3 text-start">
                <label className="form-label">Security Questions</label>
                <select className="form-select" name="security_question">
                  <option value="Mother's Surname">Mother's Surname</option>
                  <option value="Pet's Name">Pet's Name</option>
                </select>
              </div>
              <div className="mb-3 text-start">
                <label className="form-label">Security Answer</label>
                <input type="text" className="form-control" name="security_answer"/>
              </div>
              
              <div className="d-flex justify-content-start mb-2">
                <button type="button" className="btn btn-link p-0" onClick={()=>navigate("/login")}>Back to Login</button>
              </div>
              <div className="d-grid">
                <button type="submit" className="btn btn-success">Sign Up</button>
              </div>
            </form>
            <div className="text-center mt-3 login-footer">Here For Good</div>

          </div>
        </div>
      </div>
      <footer className="bg-dark text-white text-center py-2 mt-auto w-100">
        Intellectual Property of Standard Chartered Global Business Services
      </footer>
    </div>
    
  );
}

export default SignUpPage;
import axios from "axios";

const API = axios.create({
  baseURL: "http://localhost:8080", 
});


API.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("jwt"); 
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export default API;

package com.scb.Payment.Initiation.service;

import com.scb.Payment.Initiation.Security.JwtUtil;
import com.scb.Payment.Initiation.entity.RoleType;
import com.scb.Payment.Initiation.entity.Roles;
import com.scb.Payment.Initiation.entity.Users;
import com.scb.Payment.Initiation.repository.RolesRepository;
import com.scb.Payment.Initiation.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Set;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RolesRepository rolesRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private JwtUtil jwtUtil;

    private RoleType determineRole(String userId)
    {
        if(userId.toLowerCase().startsWith("cr"))
        {
            return RoleType.CREATOR;
        }
        else if(userId.toLowerCase().startsWith("ar"))
        {
            return RoleType.APPROVER;
        }
        else if(userId.toLowerCase().startsWith("jr"))
        {
            return RoleType.JR_MANAGER;
        }

        else if(userId.toLowerCase().startsWith("sr"))
        {
            return RoleType.SR_MANAGER;
        }

        else if(userId.toLowerCase().startsWith("di"))
        {
            return RoleType.DIRECTOR;
        }

        else{
            throw new IllegalArgumentException("Invalid userId"+userId);
        }
    }

    public Users signup(Users user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        RoleType roleType=determineRole(user.getUserId());
        Roles role= rolesRepository.findByRoleName(roleType)
                .orElseGet(()->{
                    Roles newRole=new Roles();
                    newRole.setRoleName(roleType);

                    return newRole;
                });
        user.getRoles().add(role);
        return userRepository.save(user);
    }

    public String login(String userId, String password) {
        Users user = userRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }
        return jwtUtil.generateToken(user);
    }

    public boolean verifySecurityAnswer(String userId, String answer) {
        Users user = userRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        return user.getSecurityAnswer().equalsIgnoreCase(answer);
    }

    public void resetPassword(String userId, String newPassword) {
        Users user = userRepository.findByUserId(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }
}

package com.scb.Payment.Initiation.controller;

import com.scb.Payment.Initiation.entity.Users;
import com.scb.Payment.Initiation.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
@RestController
@RequestMapping("/api/auth")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/signup")
    public ResponseEntity<Users> signup(@RequestBody Users user) {
        return ResponseEntity.ok(userService.signup(user));
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestParam String userId,
                                        @RequestParam String password) {
        return ResponseEntity.ok(userService.login(userId, password));
    }

    @PostMapping("/forget/verify")
    public ResponseEntity<String> verifyAnswer(@RequestParam String userId,
                                               @RequestParam String answer) {
        if (userService.verifySecurityAnswer(userId, answer)) {
            return ResponseEntity.ok("Answer correct. You can reset password.");
        }
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Incorrect answer.");
    }

    @PostMapping("/forget/reset")
    public ResponseEntity<String> resetPassword(@RequestParam String userId,
                                                @RequestParam String newPassword) {
        userService.resetPassword(userId, newPassword);
        return ResponseEntity.ok("Password reset successfully.");
    }
}



package com.scb.Payment.Initiation.entity;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;

import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "users")
public class Users {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String userId;  // e.g., "cr123", "ar456", "mr789"
    private String password;
    @ManyToMany (cascade = CascadeType.ALL,fetch = FetchType.EAGER)
    @JoinTable(
            name = "user_role_mapping",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    private Set<Roles> roles=new HashSet<>();

    private String securityQuestion;
    private String securityAnswer;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Set<Roles> getRoles() {
        return roles;
    }

    public void setRoles(Set<Roles> roles) {
        this.roles = roles;
    }

    public String getSecurityQuestion() {
        return securityQuestion;
    }

    public void setSecurityQuestion(String securityQuestion) {
        this.securityQuestion = securityQuestion;
    }

    public String getSecurityAnswer() {
        return securityAnswer;
    }

    public void setSecurityAnswer(String securityAnswer) {
        this.securityAnswer = securityAnswer;
    }
// getters & setters
}

package com.scb.Payment.Initiation.entity;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
@Entity
@Table(name = "roles")
public class Roles {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer roleId;

    @Enumerated(EnumType.STRING)
    private RoleType roleName;





    public Integer getRoleId() {
        return roleId;
    }

    public void setRoleId(Integer roleId) {
        this.roleId = roleId;
    }

    public RoleType getRoleName() {
        return roleName;
    }

    public void setRoleName(RoleType roleName) {
        this.roleName = roleName;
    }
}
