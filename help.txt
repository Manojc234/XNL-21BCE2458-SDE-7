
import React, { useState, useEffect } from "react";
import { SidebarData } from "./SidebarData";
import "../Styles/custom.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { MdLogout } from "react-icons/md";
import { useNavigate, Link } from "react-router-dom";

function Sidebar({role,setSidebarWidth}) {
  const [activeMenu, setActiveMenu] = useState(null);
  const [hoverSubMenu, setHoverSubMenu] = useState(null);
  const [boxTop, setBoxTop] = useState(0);

  // Modal state
  const [restrictOpen, setRestrictOpen] = useState(false);
  const [restrictMsg, setRestrictMsg] = useState("");

  const navigate = useNavigate();

  // Role-based access
  const checkAccess = (menuKey, subKey, thirdKey) => {
    if (
      (menuKey === "Create" ||
        menuKey === "Payroll" ||
        menuKey === "Rolled Payees" ||
        menuKey === "Drafts" ||
        menuKey === "Quick Currency Calculator") &&
      role !== "creator"
    )
      return false;

    if (
      (menuKey === "Manage" ||
        menuKey === "Make Approvers" ||
        menuKey === "View Rolled Payees") &&
      role !== "manager"
    )
      return false;

    if (
      (menuKey === "Approver" ||
        menuKey === "Approved Payees" ||
        menuKey === "Pending Payees") &&
      role !== "approver"
    )
      return false;

    if (
      (menuKey === "Add Account" ||
        menuKey === "Change Account" ||
        menuKey === "Edit Account" ||
        menuKey === "Edit Employee Accounts") &&
      (role === "approver" || role === "manager")
    )
      return false;

    if (
      (menuKey === "View Approvers" ||
        menuKey === "View Creators" ||
        menuKey === "View Managers") &&
      (role === "creator" || role === "approver")
    )
      return false;

    if (menuKey === "Change Account" && role === "manager") return false;

    return true;
  };

  const handleClick = (menuKey, subKey, thirdKey) => {
    if (!checkAccess(menuKey, subKey, thirdKey)) {
      setRestrictMsg(
        `ðŸš« You are restricted from accessing "${thirdKey || subKey || menuKey}"!`
      );
      setRestrictOpen(true);
      return;
    }

    toast.success(`âœ… Accessing ${thirdKey || subKey || menuKey}`, {
      position: "top-right",
      autoClose: 1500,
    });

    switch (thirdKey||subKey) {
      case "Change Account":
        navigate("/change-account");
        break;
      case "Service Request":
        navigate("/service-request");
        break;
      case "Edit Account":
        navigate("/edit-account");
        break;
      case "Edit Employee Accounts":
        navigate("/edit-employee");
        break;
      case "Account Details":
        navigate("/view-account");
        break;
      case "Employees":
        navigate("/view-employees");
        break;
      case "Change Password":   
        navigate("/change-password");
        break;
      case "Payroll":   
        navigate("/payee-roll");
        break;
      default:
        break;
    }

    setActiveMenu(null);
    setHoverSubMenu(null);
  };

  useEffect(() => {
    const onKey = (e) => {
      if (e.key === "Escape") setRestrictOpen(false);
    };
    if (restrictOpen) window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [restrictOpen]);
  useEffect(() => {
    let width = 80; // Menu1
    if (activeMenu && SidebarData[activeMenu]?.subMenu) {
      width += 160; // Menu2
      if (hoverSubMenu && SidebarData[activeMenu].subMenu[hoverSubMenu]?.subMenu) {
        width += 160; // Menu3
      }
    }
    setSidebarWidth(width);
  }, [activeMenu, hoverSubMenu, setSidebarWidth]);

  return (
    <div className={`sidbar ${
    activeMenu && SidebarData[activeMenu]?.subMenu
      ? "expanded"
      : "collapsed"
  }`}>
      {/* Navbar */}
      <div className="nvbar">
        <Link to="/" className="nv-left flex items-center gap-2 px-4 py-3 ">
          <img
            className="brand-logo cursor-pointer"
            src="https://upload.wikimedia.org/wikipedia/commons/7/7e/Standard_Chartered_Logo_%282021%2C_Logo_only%29.svg"
            alt="SC Logo"
          />
          <span className="brand-name">
            <h3>
              Standard <br /> Chartered
            </h3>
          </span>
        </Link>
        <div className="nvbar-right">
          <MdLogout
            size={30}
            color="white"
            className="nv-icon cursor-pointer"
          />
        </div>
      </div>

      {/* Main Menu */}
      <div className="col main-col">
        {Object.entries(SidebarData).map(([menuKey, menuVal]) => (
          <div
            key={menuKey}
            className={`menu-item vertical ${
              activeMenu === menuKey ? "active" : ""
            }`}
            onClick={() => {
              if (!checkAccess(menuKey)) {
                setRestrictMsg(
                  `ðŸš« You are restricted from accessing "${menuKey}"!`
                );
                setRestrictOpen(true);
                return;
              }
              setActiveMenu(activeMenu === menuKey ? null : menuKey);
            }}
          >
            <span className="icon big">{menuVal.icon}</span>
            <span>{menuKey}</span>
          </div>
        ))}
      </div>

      {/* Sub Menu */}
      {activeMenu && SidebarData[activeMenu]?.subMenu && (
        <div className="col-2 sub-col">
          {Object.entries(SidebarData[activeMenu].subMenu).map(
            ([subKey, subVal]) => (
              <div
                key={subKey}
                className={`menu-item-2 vertical ${
                  hoverSubMenu === subKey ? "active" : ""
                }`}
                onMouseEnter={(e) => {
                  setHoverSubMenu(subKey);
                  setBoxTop(e.currentTarget.offsetTop);
                }}
                onClick={() => handleClick(activeMenu, subKey)}
              >
                <span className="icon">{subVal.icon}</span>
                <span>{subKey}</span>
              </div>
            )
          )}
        </div>
      )}

      {/* Third Level Menu */}
      {activeMenu &&
        hoverSubMenu &&
        SidebarData[activeMenu]?.subMenu?.[hoverSubMenu]?.subMenu && (
          <div className="submenu-box" style={{ top: boxTop }}>
            {Object.entries(
              SidebarData[activeMenu].subMenu[hoverSubMenu].subMenu
            ).map(([thirdKey, thirdVal]) => (
              <div
                key={thirdKey}
                className="menu-item-3 vertical leaf"
                onClick={() => handleClick(activeMenu, hoverSubMenu, thirdKey)}
              >
                <span className="icon">{thirdVal}</span>
                <span>{thirdKey}</span>
              </div>
            ))}
          </div>
        )}

      {/* Restriction Modal */}
      {restrictOpen && (
        <div className="modal-overlay" onClick={() => setRestrictOpen(false)}>
          <div className="modal-card" onClick={(e) => e.stopPropagation()}>
            <h3 className="modal-title">Access Restricted</h3>
            <p className="modal-text">{restrictMsg}</p>
            <div className="modal-actions">
              <button
                className="modal-btn"
                onClick={() => setRestrictOpen(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Sidebar;

.app {
  display: flex;
  height: 100vh;
  font-family: "Segoe UI", sans-serif;
}

.sidbar {
  display: flex;
  background: #0d47a1;
  border-right: 1px solid #ddd;
  height: 100%;
  position: fixed;
  margin-top: 70px;
}

.col {
  display: flex;
  flex-direction: column;
  width:100px;
  border-right: 1px solid #eee;
  padding: 10px;
 
}

.main-col {
  background: #0d47a1;
  color:#fff;
  
}

.sub-col {
  background: #0d47a1;
  color:#fff;
}

.menu-item.vertical {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 6px;
 
}

.menu-item:hover {
  background: #083579;
  
}

.menu-item.active {
  background: #083579;
  font-weight: 600;
}

.menu-item.leaf {
  font-size: 14px;
}

.menu-item.vertical .icon {
  font-size: 18px;
  color: #fff;
}
.menu-item.vertical .label{
  font-size: 14px;

}

.icon.big {
  font-size: 22px;  /* Bigger for main menus */
}
.sidbar .main-col .menu-item {
 
  display: flex;
  flex-direction: column;   /* icon on top, text below */
  align-items: center;
  justify-content: center;
  padding: 15px 10px;
  cursor: pointer;
  border-bottom: 1px solid #dcdcdc;  /* divider line */
  transition: background 0.3s;
  
}

.sidbar .main-col .menu-item:last-child {
  border-bottom: none;  /* no divider after last item */
}

.sidbar .main-col .menu-item.active {
 /* highlight */
  font-weight: bold;
  border-left: 3px solid #004aad; /* bank blue accent */
}

.sidbar .main-col .menu-item .icon {
  font-size: 22px;
  margin-bottom: 6px;
}
.sidbar .sub-col .menu-item,
.sidbar .hover-col .menu-item {
  display: flex;
  flex-direction: row;   /* icon beside text */
  align-items: center;
  padding: 10px 12px;
  cursor: pointer;
  border-bottom: 1px solid #f0f0f0;
  transition: background 0.3s;
  
}

.sidbar .sub-col .menu-item:hover,
.sidbar .hover-col .menu-item:hover {
  background: #f5f5f5;
}

.sidbar .sub-col .menu-item .icon,
.sidbar .hover-col .menu-item .icon {
  font-size: 18px;
  margin-right: 8px;
}

.menu-item-2.vertical {
  display: flex;
  align-items: center;
  padding:8px 12px;
  gap: 8px;
  cursor:pointer;
  width:200px;
 
}

.menu-item-2:hover {
  background: #083579;
 
}

.menu-item-2.vertical .icon {
  font-size: 18px;
  color: #fff;
}
.menu-item-2.vertical .label{
  font-size: 14px;

}
.submenu-box{
  position:absolute;
  left: 320px;
  top:0;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 6px;
  box-shadow:0 4px 8px rgba(0,0,0,0.1);
  padding:8px;
  min-width: 180px;
  z-index: 1000;
}
.submenu-box::before{
  content:"";
  position: absolute;
  left:-15px;
  top:20px;
  border-width: 8px;
  border-style: solid;
  border-color: transparent #fff transparent transparent;
  filter:drop-shadow(-1px 1px 1px rgba(0,0,0,0.1));

}
.menu-item-3.vertical {
  display: flex;
  align-items: center;
  padding:8px 12px;
  gap: 8px;
  cursor:pointer;
  width:200px;
  color:#0d47a1;
 
}

.menu-item-3:hover{
  font-size: 15px;
  width:calc(100% -28px);
}
.menu-item-3 .vertical .icon:hover{
  color:#fff;
}

.menu-item-3.vertical .icon {
  font-size: 18px;
  color: #0d47a1;
}
.menu-item-3.vertical .label{
  font-size: 14px;

}
.sidbar{
  margin-top: 90px;
}


/* ðŸ”¹ Navbar */
.nvbar {
  position: fixed;
  top:0;
  left:0;
  right:0;
  width: 100vw; 
  height: 90px;  /* Bigger height */
  background: linear-gradient(90deg, #0d47a1, #1565c0); /* SCB-style gradient */
  display: flex;
  align-items: center;
  justify-content: space-between; /* icons to right */
  padding: 0 30px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.25);
  z-index: 1000;
  box-sizing: border-box;
}
.nv-left{
  
  display: flex;
  align-items: center;
  gap:15px;
  cursor: pointer;

}
.brand-logo{
  height: 60px;
  width:50px;
}
.brand-name{
  font-size: 22px;
  font-weight: 400;
  color:white;
}
.nvbar-right{
  display: flex;
  align-items: center;  
  
}
.nv-icon{
  cursor: pointer;
  transition:transform 0.2s ease;
}
.nv-icon:hover{
  transform:scale(1.1);
}

/* ðŸ”¹ Push sidebar below navbar */
.sidbar {
  margin-top: 90px;  /* Same as navbar height */
  background: #1565c0;
  min-height: 100vh;
  box-shadow: 2px 0 6px rgba(0,0,0,0.2);
}

.main-content{
  margin-left: 200px;
  padding:70px;

}
.brand-name{
  color: #ffffffef;
  cursor: pointer;
}

/* ===== Centered Modal ===== */
.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.45);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000; /* above navbar (1000) and menus */
}

.modal-card {
  background: #ffffff;
  width: min(92vw, 420px);
  border-radius: 14px;
  box-shadow: 0 20px 60px rgba(0,0,0,0.25);
  padding: 20px 22px;
  text-align: center;
}

.modal-title {
  margin: 0 0 8px 0;
  font-size: 20px;
  font-weight: 700;
  color: #0d47a1;
}

.modal-text {
  margin: 0 0 16px 0;
  font-size: 15px;
  color: #333;
}

.modal-actions {
  display: flex;
  justify-content: center;
}

.modal-btn {
  background: #0d47a1;
  color: #fff;
  border: none;
  border-radius: 10px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
}

.modal-btn:hover {
  filter: brightness(1.05);
}
/* Remove underline from brand-name link */
.nv-left, 
.nv-left a, 
.brand-name, 
.brand-name a {
  text-decoration: none !important;
  color: white;
}

.brand-name h3 {
  margin: 0; /* remove extra spacing */
  line-height: 1.2;
  font-weight: 700;
}
/* Sidebar: occupies space in flex, not overlap */
/* Sidebar: sits in flex row */
.sidbar {
  height: calc(100vh - 90px); /* below navbar */
  margin-top: 90px;
  background: #0d47a1;
  transition: width 0.3s ease;
  overflow: visible;   /* allow hover menus to show */
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  overflow: visible;        /* higher than content */
}


/* Default width: only main-col */
.sidbar.collapsed {
  width: 100px;
}

/* Expanded width: main-col + sub-col */
.sidbar.expanded {
  width: 300px; /* adjust based on your sub menu width */
}

/* Main content auto-adjusts */
.layout-content {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
  transition: margin-left 0.3s ease;
  background: #f9f9f9;
  min-height: 100vh;/* lower than sidebar/menus */
}

.submenu-box {
  position: absolute;
  top: 0;
  left: 100%;           /* appear to the right of submenu */
  width: 220px;
  background: #fff;
  color: white;
  transition: all 0.3s ease;
  z-index: 20;          /* keep above main content */
  box-shadow: 2px 2px 8px rgba(0,0,0,0.2);
}
.layout {
  display: flex;
  flex-direction: row;
  height: 100vh;
}
.layout.sidbar-collapsed .layout-content {
  margin-left: 80px;
}

/* When sidebar is expanded */
.layout.sidbar-expanded .layout-content {
  margin-left: 250px;
}
