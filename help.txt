import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Styles/custom.css";

import ScLogo from "../assets/ScLogo.jpg";
import Logout from "../assets/Logout.png";
import user from "../assets/user.jpg";

import { MdAccountBalance, MdOutlineManageAccounts } from "react-icons/md";
import {
  FaMoneyCheckAlt, FaChevronRight, FaChevronDown, FaLock, FaUserShield,
  FaUserTie, FaPlusCircle, FaUserEdit, FaUserPlus, FaCalculator, FaFileAlt,
  FaDownload, FaListUl, FaCheck, FaTimes, FaClipboardList, FaCheckSquare
} from "react-icons/fa";

function Dashboard({ role = "operator" }) {
  const [openTop, setOpenTop] = useState("accounts");
  const [hoverSection, setHoverSection] = useState({ top: null, section: null });
  const [selectedPath, setSelectedPath] = useState([]);
  const [collapsed, setCollapsed] = useState(false); // ✅ sidebar collapse toggle

  const MENU = [
    {
      key: "accounts",
      label: "Accounts",
      icon: <MdAccountBalance />,
      sections: [
        {
          key: "current",
          label: "Current Account",
          items: [
            { key: "accDetails", label: "Account Details", icon: <FaFileAlt /> },
            { key: "serviceReq", label: "Service Request", icon: <FaClipboardList /> },
            { key: "employees", label: "Employees", icon: <FaUserTie /> },
          ],
        },
        {
          key: "change",
          label: "Change Account",
          items: [
            { key: "addAcc", label: "Add Account", icon: <FaUserPlus /> },
            { key: "editAcc", label: "Edit Account", icon: <FaUserEdit /> },
            { key: "editEmpAcc", label: "Edit Employee Accounts", icon: <MdOutlineManageAccounts /> },
          ],
        },
      ],
    },
    {
      key: "cash",
      label: "Cash",
      icon: <FaMoneyCheckAlt />,
      sections: [
        {
          key: "create",
          label: "Create",
          roles: ["creator"],
          items: [
            { key: "payroll", label: "Payroll", icon: <FaCheckSquare /> },
            { key: "rolledPayees", label: "Rolled Payees", icon: <FaUserTie /> },
            { key: "drafts", label: "Drafts", icon: <FaFileAlt /> },
            { key: "qcc", label: "Quick Currency Calculator", icon: <FaCalculator /> },
          ],
        },
        {
          key: "manage",
          label: "Manage",
          roles: ["manager"],
          items: [
            { key: "makeApprovers", label: "Make Approvers", icon: <FaUserShield /> },
            { key: "viewRolled", label: "View Rolled Payees", icon: <FaUserTie /> },
          ],
        },
        {
          key: "approve",
          label: "Approve",
          roles: ["approver"],
          items: [
            { key: "approved", label: "Approved Payees", icon: <FaCheck /> },
            { key: "pending", label: "Pending Payees", icon: <FaClipboardList /> },
          ],
        },
      ],
    },
    {
      key: "transactions",
      label: "Transactions",
      icon: <FaListUl />,
      sections: [
        {
          key: "rolled",
          label: "Rolled Payees",
          items: [
            { key: "failed", label: "Failed Transactions", icon: <FaTimes /> },
            { key: "success", label: "Successful Transactions", icon: <FaCheck /> },
            { key: "hold", label: "Hold Transactions", icon: <FaClipboardList /> },
          ],
        },
        {
          key: "estatements",
          label: "E-Statements",
          items: [
            { key: "filter", label: "Filter Transactions", icon: <FaListUl /> },
            { key: "download", label: "Download Transactions", icon: <FaDownload /> },
            { key: "summary", label: "Transactions Summary", icon: <FaFileAlt /> },
          ],
        },
      ],
    },
    {
      key: "settings",
      label: "Settings",
      icon: <FaLock />,
      sections: [
        {
          key: "settingsRoot",
          label: "General",
          items: [
            { key: "changePwd", label: "Change Password", icon: <FaLock /> },
            { key: "viewApprovers", label: "View Approvers", icon: <FaUserShield /> },
            { key: "viewManagers", label: "View Managers", icon: <FaUserTie /> },
            { key: "viewCreates", label: "View Creates", icon: <FaPlusCircle /> },
          ],
        },
      ],
    },
  ];

  const filterSectionsByRole = (top) => {
    if (top.key !== "cash") return top.sections;
    return top.sections.filter(
      (sec) => !sec.roles || sec.roles.includes(role) || role === "operator"
    );
  };

  const onClickFinalItem = (tLabel, sLabel, iLabel) => {
    setSelectedPath([tLabel, sLabel, iLabel]);
  };

  const renderThirdPanel = (sec, tLabel) => {
    return (
      <div className="third-panel-horizontal"> {/* ✅ horizontal submenu */}
        {sec.items.map((it) => (
          <div
            key={it.key}
            className="third-item-h"
            onClick={() => onClickFinalItem(tLabel, sec.label, it.label)}
          >
            <span className="me-1">{it.icon}</span>
            {it.label}
          </div>
        ))}
      </div>
    );
  };

  const renderSidebar = () => (
    <>
      <div className="d-flex align-items-center justify-content-between mb-3">
        <img className="logo" src={ScLogo} alt="logo" />
        {!collapsed && <span className="brand-name text-light">Straight2Bank</span>}
      </div>
      <button
        className="collapse-btn"
        onClick={() => setCollapsed(!collapsed)}
      >
        {collapsed ? "»" : "«"}
      </button>

      {MENU.map((top) => {
        const sections = filterSectionsByRole(top);
        return (
          <div key={top.key} className="top-block border-bottom">
            <button
              className={`top-item ${openTop === top.key ? "active" : ""}`}
              onClick={() => setOpenTop(openTop === top.key ? null : top.key)}
            >
              <span className="me-2">{top.icon}</span>
              {!collapsed && top.label}
              <span className="ms-auto">
                {openTop === top.key ? <FaChevronDown /> : <FaChevronRight />}
              </span>
            </button>

            {openTop === top.key && !collapsed && (
              <div className="second-list-horizontal">
                {sections.map((sec) => (
                  <div key={sec.key} className="second-item-h">
                    {renderThirdPanel(sec, top.label)}
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </>
  );

  const renderMain = () => {
    if (selectedPath.length === 0) {
      return (
        <div className="container-fluid">
          <div className="row g-4 mb-4">
            <div className="col-md-4">
              <div className="card gradient-card shadow-sm text-white">
                <div className="card-body">
                  <h5 className="card-title">Account Balance</h5>
                  <h3>₹ 2,00,45,000</h3>
                  <button className="b btn btn-light btn-sm mt-2">View Balance</button>
                </div>
              </div>
            </div>
            <div className="col-md-4">
              <div className="card gradient-card-2 shadow-sm text-white">
                <div className="card-body">
                  <h5 className="card-title">Approval Status</h5>
                  <h3>5 Pending</h3>
                  <button className="b btn btn-light btn-sm mt-2">Approve</button>
                </div>
              </div>
            </div>
            <div className="col-md-4">
              <div className="card gradient-card-3 shadow-sm text-white">
                <div className="card-body">
                  <h5 className="card-title">Transactions Today</h5>
                  <h3>23</h3>
                  <button className="b btn btn-light btn-sm mt-2">Transactions</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }
    return (
      <div className="p-4">
        <div className="breadcrumbx">
          {selectedPath.join("  ›  ")}
        </div>
        <div className="mt-3">
          <h4>{selectedPath[selectedPath.length - 1]}</h4>
          <p className="text-muted">
            This is placeholder content for <strong>{selectedPath.join(" / ")}</strong>.
          </p>
        </div>
      </div>
    );
  };

  return (
    <div className="d-flex dashboard-container">
      <div className={`bar text-white p-3 ${collapsed ? "collapsed" : ""}`}>
        {renderSidebar()}
      </div>

      <div className="flex-grow-1 d-flex flex-column">
        <nav className="px-3 d-flex justify-content-between align-items-center topbar">
          <div className="userprofile text-light">
            <img className="logo2" src={user} alt="user" /> SCB0334
          </div>
          <img className="logo1" src={Logout} alt="logout" />
        </nav>
        <div className="flex-grow-1 p-4 bg-light">
          {renderMain()}
        </div>
      </div>
    </div>
  );
}

export default Dashboard;



.dashboard-container {
  height: 100vh;
}

.bar {
  background: #004d40; /* ✅ SCB dark teal */
  width: 260px;
  transition: width 0.3s ease;
  overflow-x: hidden;
}

.bar.collapsed {
  width: 80px;
}

.brand-name {
  font-size: 1.1rem;
  font-weight: 600;
}

.topbar {
  background: #00695c; /* ✅ SCB green */
  height: 60px;
}

.logo {
  width: 40px;
  border-radius: 50%;
}

.logo1 {
  width: 28px;
  cursor: pointer;
}

.logo2 {
  width: 28px;
  margin-right: 8px;
  border-radius: 50%;
}

.top-item {
  background: transparent;
  border: none;
  color: white;
  width: 100%;
  text-align: left;
  padding: 10px;
  display: flex;
  align-items: center;
  cursor: pointer;
}

.top-item.active {
  background: rgba(255, 255, 255, 0.1);
}

.collapse-btn {
  background: none;
  border: none;
  color: white;
  margin-bottom: 10px;
  cursor: pointer;
  font-size: 1.2rem;
}

/* ✅ Horizontal submenu */
.second-list-horizontal {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  padding: 8px 10px;
  background: rgba(255, 255, 255, 0.05);
}

.third-panel-horizontal {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
}

.third-item-h {
  padding: 6px 10px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 6px;
  color: white;
  cursor: pointer;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
}

.third-item-h:hover {
  background: rgba(255, 255, 255, 0.2);
}

/* Dashboard cards gradient */
.gradient-card {
  background: linear-gradient(135deg, #00695c, #004d40);
}

.gradient-card-2 {
  background: linear-gradient(135deg, #2e7d32, #1b5e20);
}

.gradient-card-3 {
  background: linear-gradient(135deg, #1565c0, #0d47a1);
}

.breadcrumbx {
  font-size: 0.95rem;
  color: #555;
}

