package com.sc.faas.API;

import com.sc.faas.dto.Form;
import com.sc.faas.dto.SubmitResponse;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
@Path("/submit")
@RegisterRestClient(configKey = "Xapi")
public interface Xapi {

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    SubmitResponse submit(Form dto);
}
package com.sc.faas.dto;

public class Form {
    public String name;
    public String email;
    public String dob;
    public String gender;
    public String pno;

}
package com.sc.faas.dto;




public class Message {
    public String name;


}
package com.sc.faas.dto;

import lombok.AllArgsConstructor;

public class MyObject {
    public Long id;
    public String name;


    public MyObject(Long id, String name) {
    }
}
package com.sc.faas.dto;

public class SubmitResponse {
    private String message;
    private String status;
    private Form savedForm;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Form getSavedForm() {
        return savedForm;
    }

    public void setSavedForm(Form savedForm) {
        this.savedForm = savedForm;
    }
}
package com.sc.faas.service;

import com.sc.faas.API.Xapi;
import com.sc.faas.dto.Form;
import com.sc.faas.dto.MyObject;
import com.sc.faas.dto.SubmitResponse;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@ApplicationScoped
public class MutationService {
    @Inject
    @RestClient
    Xapi Xapi;

    public SubmitResponse submitForm(Form form)
    {
        return Xapi.submit(form);
    }

    public MyObject updateObject(Long id, String name) {
        return new MyObject(id, name);
    }
}
package com.sc.faas.service;

import com.sc.faas.dto.Message;
import com.sc.faas.dto.MyObject;
import jakarta.enterprise.context.ApplicationScoped;

import java.util.List;

@ApplicationScoped
public class QueryService {

    public List<MyObject> objects() {
        return List.of(new MyObject(10L, "TEST"));
    }

    public Message get_message(){
        return  new Message();
    }
}
package com.sc.faas;

import com.expediagroup.graphql.generator.TopLevelObject;
import com.sc.devkit.graphql.dto.Input;
import com.sc.devkit.graphql.service.GraphQLServer;
import com.sc.devkit.graphql.service.GraphQLUtil;
import com.sc.faas.service.MutationService;
import com.sc.faas.service.QueryService;
import io.quarkus.funqy.Funq;
import jakarta.inject.Inject;
import jakarta.enterprise.context.ApplicationScoped;

import java.util.List;

@ApplicationScoped
public class Function {

    @Inject
    private QueryService queryService;

    @Inject
    private MutationService mutationService;

    private GraphQLServer graphQLServer;

    public GraphQLServer getGraphQLServer() {
        if (graphQLServer == null) {
            graphQLServer = new GraphQLServer.Builder()
                    .federatedSupportedPackages(List.of("com.sc.faas.dto"))
                    .queries(List.of(new TopLevelObject(queryService, GraphQLUtil.fromJavaClass(QueryService.class))))
                    .mutations(List.of(new TopLevelObject(mutationService, GraphQLUtil.fromJavaClass(MutationService.class))))
                    .build();
        }
        return graphQLServer;
    }

    @Funq
    public Object graphql(Input input) {
        return getGraphQLServer().serve(input);
    }
}
package com.sc.faas;

import com.expediagroup.graphql.generator.TopLevelObject;
import com.sc.devkit.graphql.dto.Input;
import com.sc.devkit.graphql.service.GraphQLServer;
import com.sc.devkit.graphql.service.GraphQLUtil;
import com.sc.faas.service.MutationService;
import com.sc.faas.service.QueryService;
import io.quarkus.funqy.Funq;
import jakarta.inject.Inject;
import jakarta.enterprise.context.ApplicationScoped;

import java.util.List;

@ApplicationScoped
public class Function {

    @Inject
    private QueryService queryService;

    @Inject
    private MutationService mutationService;

    private GraphQLServer graphQLServer;

    public GraphQLServer getGraphQLServer() {
        if (graphQLServer == null) {
            graphQLServer = new GraphQLServer.Builder()
                    .federatedSupportedPackages(List.of("com.sc.faas.dto"))
                    .queries(List.of(new TopLevelObject(queryService, GraphQLUtil.fromJavaClass(QueryService.class))))
                    .mutations(List.of(new TopLevelObject(mutationService, GraphQLUtil.fromJavaClass(MutationService.class))))
                    .build();
        }
        return graphQLServer;
    }

    @Funq
    public Object graphql(Input input) {
        return getGraphQLServer().serve(input);
    }
}
quarkus.http.port=8080
quarkus.http.host=0.0.0.0
quarkus.grpc.dev-mode.force-server-start=false
quarkus.otel.enabled=false
quarkus.rest-client."com.sc.faas.API.Xapi".url=http://localhost:8081
devkit.federated.supported.packages=com.sc.faas,com.sc.devkit

mutation SubmitForm{
    submitForm(form:{
        name:"mxy",
        email:"Exy@gmail.com",
        dob:"2027-08-02",
        gender:"female",
        pno:"900000"

    })
    {
        status
        message
    } 
}
http://localhost:8080/graphql
{
    "details": "Error id 588e2012-581f-4dc8-b28f-ddc80c82e053-8, io.quarkus.funqy.runtime.ApplicationException: com.expediagroup.graphql.generator.exceptions.TypeNotSupportedException: Cannot convert kotlin.Unit since it is not a valid GraphQL type or outside the supported packages \"[com.sc.devkit.graphql.dto.pagination.PageInfoDisplay, com.sc.faas.dto, com.sc.faas, com.sc.devkit]\"",
    "stack": "io.quarkus.funqy.runtime.ApplicationException: com.expediagroup.graphql.generator.exceptions.TypeNotSupportedException: Cannot convert kotlin.Unit since it is not a valid GraphQL type or outside the supported packages \"[com.sc.devkit.graphql.dto.pagination.PageInfoDisplay, com.sc.faas.dto, com.sc.faas, com.sc.devkit]\"\r\n\tat io.quarkus.funqy.runtime.FunctionInvoker.invoke(FunctionInvoker.java:136)\r\n\tat io.quarkus.funqy.runtime.bindings.http.VertxRequestHandler.dispatch(VertxRequestHandler.java:143)\r\n\tat io.quarkus.funqy.runtime.bindings.http.VertxRequestHandler$1.run(VertxRequestHandler.java:118)\r\n\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:599)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2516)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2495)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1521)\r\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\r\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\r\nCaused by: com.expediagroup.graphql.generator.exceptions.TypeNotSupportedException: Cannot convert kotlin.Unit since it is not a valid GraphQL type or outside the supported packages \"[com.sc.devkit.graphql.dto.pagination.PageInfoDisplay, com.sc.faas.dto, com.sc.faas, com.sc.devkit]\"\r\n\tat com.expediagroup.graphql.generator.internal.state.TypesCache.getCacheKeyString(TypesCache.kt:130)\r\n\tat com.expediagroup.graphql.generator.internal.state.TypesCache.get$graphql_kotlin_schema_generator(TypesCache.kt:53)\r\n\tat com.expediagroup.graphql.generator.internal.state.TypesCache.get$graphql_kotlin_schema_generator(TypesCache.kt:48)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt.objectFromReflection(generateGraphQLType.kt:58)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt.generateGraphQLType(generateGraphQLType.kt:45)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateFunctionKt.generateFunction(generateFunction.kt:56)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateFunctionKt.generateFunction$default(generateFunction.kt:34)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateObjectKt.generateObject(generateObject.kt:64)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt.getGraphQLType(generateGraphQLType.kt:106)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt.access$getGraphQLType(generateGraphQLType.kt:1)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt$objectFromReflection$1.invoke(generateGraphQLType.kt:67)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt$objectFromReflection$1.invoke(generateGraphQLType.kt:66)\r\n\tat com.expediagroup.graphql.generator.internal.state.TypesCache.buildIfNotUnderConstruction$graphql_kotlin_schema_generator(TypesCache.kt:150)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt.objectFromReflection(generateGraphQLType.kt:66)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateGraphQLTypeKt.generateGraphQLType(generateGraphQLType.kt:45)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateFunctionKt.generateFunction(generateFunction.kt:56)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateFunctionKt.generateFunction$default(generateFunction.kt:34)\r\n\tat com.expediagroup.graphql.generator.internal.types.GenerateMutationKt.generateMutations(generateMutation.kt:48)\r\n\tat com.expediagroup.graphql.generator.SchemaGenerator.generateSchema(SchemaGenerator.kt:81)\r\n\tat com.expediagroup.graphql.generator.federation.FederatedSchemaGenerator.generateSchema(FederatedSchemaGenerator.kt:45)\r\n\tat com.expediagroup.graphql.generator.SchemaGenerator.generateSchema$default(SchemaGenerator.kt:58)\r\n\tat com.expediagroup.graphql.generator.federation.ToFederatedSchemaKt.toFederatedSchema(toFederatedSchema.kt:44)\r\n\tat com.expediagroup.graphql.generator.federation.ToFederatedSchemaKt.toFederatedSchema$default(toFederatedSchema.kt:35)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer$graphqlSchema$2.invoke(GraphQLServer.kt:60)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer$graphqlSchema$2.invoke(GraphQLServer.kt:41)\r\n\tat kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer.getGraphqlSchema(GraphQLServer.kt:41)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer.access$getGraphqlSchema(GraphQLServer.kt:33)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer$graphQL$2.invoke(GraphQLServer.kt:91)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer$graphQL$2.invoke(GraphQLServer.kt:67)\r\n\tat kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer.getGraphQL(GraphQLServer.kt:67)\r\n\tat com.sc.devkit.graphql.service.GraphQLServer.serve(GraphQLServer.kt:126)\r\n\tat com.sc.faas.Function.graphql(Function.java:39)\r\n\tat com.sc.faas.Function_ClientProxy.graphql(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat io.quarkus.funqy.runtime.FunctionInvoker.invoke(FunctionInvoker.java:123)\r\n\t... 10 more"
}
