package com.sc.faas.dto.Protegrity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import java.util.Date;

@Entity
public class ProtegrityRenewalDTO {

    @Id
    @Column(name = "CIT_SNO")
    private Long citSno;

    @Column(name = "CIT_TYPE")
    private String citType;

    @Column(name = "CIT_APPLICATION_NAME")
    private String citApplicationName;

    @Column(name = "CIT_APP_ONBOARD_DATE")
    private Date citAppOnboardDate;

    @Column(name = "CIT_APP_STATUS")
    private String citAppStatus;

    @Column(name = "CIT_ITAM_NO")
    private String citItamNo;

    @Column(name = "CIT_APP_OWNER")
    private String citAppOwner;

    @Column(name = "CIT_BUS_CRITICALLITY")
    private String citBusCriticality;

    @Column(name = "CIT_BUS_UNIT")
    private String citBusUnit;

    @Column(name = "CIT_PRI_CONTACT")
    private String citPriContact;

    @Column(name = "CIT_REM_GROUP")
    private String citRemGroup;

    @Column(name = "CIT_SEC_CONTACT")
    private String citSecContact;

    @Column(name = "CIT_SERVICE_PROVIDED")
    private String citServiceProvided;

    @Column(name = "CIT_SERVICE_MODEL")
    private String citServiceModel;

    @Column(name = "CIT_USE_CASE")
    private String citUseCase;

    @Column(name = "CIT_DATABASE")
    private String citDatabase;

    @Column(name = "CIT_DB_HOSTED_TYPE")
    private String citDbHostedType;

    @Column(name = "CIT_STORAGE_DEVICES")
    private String citStorageDevices;

    @Column(name = "CIT_BUSS_JUSTIFICATION")
    private String citBussJustification;

    @Column(name = "CIT_TYPE_PR_NONPR")
    private String citTypePrNonpr;

    @Column(name = "RECERT_DATE")
    private Date recertDate;

    @Column(name = "RECERT_BY")
    private String recertBy;

    @Column(name = "APP_EXP_DAYS")
    private Long appExpDays;

    @Column(name = "RENEWAL_STATUS")
    private String renewalStatus;

    @Column(name = "APP_RENEWAL_DATE")
    private Date appRenewalDate;

    // Getters and setters omitted for brevity (generate them)
}



package com.sc.faas.repository.Protegrity;

import com.sc.faas.dto.Protegrity.ProtegrityRenewalDTO;
import io.quarkus.hibernate.orm.panache.PanacheRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.persistence.Query;
import java.util.List;

@ApplicationScoped
public class ProtegrityRenewalRepository implements PanacheRepository<ProtegrityRenewalDTO> {

    public List<ProtegrityRenewalDTO> findRenewalsWithin90Days() {
        String sql = """
            SELECT "CIT_SNO",
                   INITCAP(CIT_TYPE) as CIT_TYPE,
                   CIT_APPLICATION_NAME,
                   "CIT_APP_ONBOARD_DATE",
                   "CIT_APP_STATUS",
                   "CIT_ITAM_NO",
                   "CIT_APP_OWNER",
                   "CIT_BUS_CRITICALLITY",
                   "CIT_BUS_UNIT",
                   "CIT_PRI_CONTACT",
                   "CIT_REM_GROUP",
                   "CIT_SEC_CONTACT",
                   "CIT_SERVICE_PROVIDED",
                   "CIT_SERVICE_MODEL",
                   decode(CIT_USE_CASE, 'Others', CIT_USECASE_OTHERS, CIT_USE_CASE) CIT_USE_CASE,
                   decode(CIT_DATABASE, 'Others', CIT_DB_OTHERS, CIT_DATABASE) CIT_DATABASE,
                   "CIT_DB_HOSTED_TYPE",
                   decode(CIT_STORAGE_DEVICES, 'Others', CIT_STORAGE_OTHERS, CIT_STORAGE_DEVICES) CIT_STORAGE_DEVICES,
                   "CIT_BUSS_JUSTIFICATION",
                   "CIT_TYPE_PR_NONPR",
                   RECERT_DATE,
                   RECERT_BY,
                   trunc(RECERT_APP_RENEWAL_DATE) - trunc(sysdate) as APP_EXP_DAYS,
                   DECODE(RECERT_APP_STATUS,'RECERT_RESPOND','INREVIEW','RECERT_COMPLETED','COMPLETED',RECERT_APP_STATUS) as RENEWAL_STATUS,
                   RECERT_APP_RENEWAL_DATE  as APP_RENEWAL_DATE
            FROM "#OWNER#"."CAAS_INVENTORY_TAB"
            WHERE trunc(RECERT_APP_RENEWAL_DATE) - trunc(sysdate) <= 90
              AND CIT_TYPE='protegrity'
        """;

        Query query = getEntityManager().createNativeQuery(sql, ProtegrityRenewalDTO.class);
        return query.getResultList();
    }
}


package com.sc.faas.service.Protegrity;

import com.sc.faas.dto.Protegrity.ProtegrityRenewalDTO;
import com.sc.faas.repository.Protegrity.ProtegrityRenewalRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import java.util.List;

@ApplicationScoped
public class ProtegrityRenewalService {

    @Inject
    private ProtegrityRenewalRepository repository;

    public List<ProtegrityRenewalDTO> getRenewalsWithin90Days() {
        return repository.findRenewalsWithin90Days();
    }
}


package com.sc.faas;

import com.sc.faas.dto.Protegrity.ProtegrityRenewalDTO;
import com.sc.faas.service.Protegrity.ProtegrityRenewalService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import java.util.List;

@Path("/api/process")
public class ProtegrityRenewalFunction {

    @Inject
    private ProtegrityRenewalService renewalService;

    @GET
    @Path("/get/protegrity-renewals")
    @Produces(MediaType.APPLICATION_JSON)
    public List<ProtegrityRenewalDTO> getRenewals() {
        return renewalService.getRenewalsWithin90Days();
    }
}

