import { html, LitElement, css } from 'lit';
import {
  createContext as createContextData,
  contexts as context,
} from '@scdevkit/data';
import { formatDate } from './Functions/sorting.js';
import { getAllAuditbyId } from '../dlp/GraphqlQueries/Audit.js';

const graphQLClientContext = createContextData(context.GRAPHQL_CLIENT);

export class AuditTable extends LitElement {
  static styles = css`
    .buttongroup{
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
      
    }
    .table {
      height: 30vh;
    }
  `;

  static properties = {
    getCaseDetails: {
      object: JSON,
    },
    getCaseDetailsLoaded: { state: true },
    totalPages: { type: Number },
    currentPageIndex: { type: Number },
    caseid: { state: true },
  };

  constructor() {
    super();

    this.getCaseDetailsLoaded = false;
    this.getCaseDetails = [];
    this.caseid = '';
    this.conf = [
      {
        property: 'createddate',
        header: 'Time',
       cell: props => formatDate(props.getValue()) ?? '-',
      },
      {
        property: 'description',
        header: 'Description',
       cell: props => {
          let val = props.getValue() || '-';
          return val
            .replace(/DLP:BE/gi, 'DLP-RMGT')
            .replace(/DLP:PE/gi, 'DLP-RM')
            .replace(/DLP:ET/gi, 'DLP-RM')
            .replace(/DLP:HICS/gi, 'DLP-CISO');
        },
      },
      {
        property: 'performedby',
        header: 'Performed by',
     
      },
      {
        property:'performedAtStage',
        header:"Performed at Stage",
        cell: props => {
          let val = props.getValue() || '-';
          return val
            .replace(/DLP:BE/gi, 'DLP-RMGT')
            .replace(/DLP:PE/gi, 'DLP-RM')
            .replace(/DLP:ET/gi, 'DLP-RM')
            .replace(/DLP:HICS/gi, 'DLP-CISO');
        },
      }
    ];
    this.CommenttableData = [];
  }

  connectedCallback() {
    super.connectedCallback();
    this.getCaseDetails = [];
    this.getComments();

    this.addEventListener('audit', this.getComments);
  }

  _graphQLClientContextConsumer = graphQLClientContext.createConsumer(this);

  async getComments() {
    try {
      const graphQLreportClient = this._graphQLClientContextConsumer.value;
      const response = await getAllAuditbyId(graphQLreportClient, this.caseid);

      if (response?.length !== 0) {
        this.getCaseDetails = response;
        this.getCaseDetailsLoaded = true;
      } else {
        this.getCaseDetails = [];
        this.getCaseDetailsLoaded = true;
      }
    } catch (error) {
      this.getCaseDetails = [];
      this.getCaseDetailsLoaded = true;
    }
  }

  onRefresh() {
    this.getCaseDetailsLoaded = false;

    this.getComments();
  }

  disconnectedCallback() {
    this.removeEventListener('audit', this.getComments);
    super.disconnectedCallback();
  }

  render() {
    return html`
      <div style="display: flex;justify-content: flex-end;">
        <sc-button
          type="secondary"
          size="md"
          width="auto"
          left-icon=""
          icon-position=""
          loading-text=""
          @click=${this.onRefresh}
        >
          Refresh
        </sc-button>
      </div>

      ${this.getCaseDetailsLoaded
        ? html`
            <sc-data-grid
              .columns=${this.conf}
              .data=${this.getCaseDetails}
              pagination="true"
              page-size="6"
            ></sc-data-grid>
          `
        : html` <sc-spinner type="page" size="md" color="blue"> </sc-spinner> `}
    `;
  }
}
