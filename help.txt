package com.scb.Payment.Initiation.service;

import com.scb.Payment.Initiation.entity.Batch;
import com.scb.Payment.Initiation.entity.Users;
import com.scb.Payment.Initiation.repository.BatchRepository;
import com.scb.Payment.Initiation.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class BatchService {

    @Autowired
    private BatchRepository batchRepository;

    @Autowired
    private UserRepository userRepository;

    public Batch saveBatch(Batch batch) {
        Users creator = userRepository.findById(batch.getCreatedBy().getId()).orElseThrow(()-> new RuntimeException("User not found"));
        batch.setCreatedBy(creator);
        return batchRepository.save(batch);

    }

    public List<Batch> getAllBatches() {
        return batchRepository.findAll();
    }

    public Optional<Batch> getBatchById(Long batchId) {
        return batchRepository.findByBatchId(batchId);
    }

    public List<Batch> getBatchesByCreatedBy(Long createdById) {
        Users user = userRepository.findById(createdById).orElseThrow(()-> new RuntimeException("User Not found"));
        return batchRepository.findByCreatedBy(user);
    }

    public List<Batch> getBatchesByStatus(String status) {
        return batchRepository.findByStatus(status);
    }

    public List<Batch> getDraftBatches() {
        return batchRepository.findByIsDraft(true);
    }

    public List<Batch> getBatchesByName(String batchName) {
        return batchRepository.findByBatchNameContaining(batchName);
    }

    public Batch updateBatch(Long batchId, Batch batchDetails) {
        Optional<Batch> optionalBatch = batchRepository.findByBatchId(batchId);
        if (optionalBatch.isPresent()) {
            Batch batch = optionalBatch.get();
            batch.setBatchName(batchDetails.getBatchName());
            batch.setTotAmt(batchDetails.getTotAmt());
            batch.setCurrency(batchDetails.getCurrency());
            batch.setStatus(batchDetails.getStatus());
            batch.setDraft(batchDetails.getDraft());
            batch.setTotDebitAmt(batchDetails.getTotDebitAmt());
            batch.setComments(batchDetails.getComments());
            batch.setNumOfPayments(batchDetails.getNumOfPayments());
            batch.setYourRef(batchDetails.getYourRef());
            batch.setPaymentRef(batchDetails.getPaymentRef());
            return batchRepository.save(batch);
        }
        return null;
    }

    public boolean deleteBatch(Long batchId) {
        if (batchRepository.existsById(batchId)) {
            batchRepository.deleteById(batchId);
            return true;
        }
        return false;
    }

    public List<Batch> getBatchesByCreatedByAndStatus(Integer createdBy, String status) {
        return batchRepository.findByCreatedByAndStatus(createdBy, status);
    }
}
package com.scb.Payment.Initiation.controller;



import com.scb.Payment.Initiation.entity.Batch;
import com.scb.Payment.Initiation.entity.Users;
import com.scb.Payment.Initiation.repository.UserRepository;

import com.scb.Payment.Initiation.service.ApproverService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@RestController
@RequestMapping("/api")
public class ApproverController {

    @Autowired
    private ApproverService approverService;

    @Autowired
    private UserRepository userRepository;



    @GetMapping("/approver/batches")
    public List<Batch> getPendingBatches() {
        return approverService.getPendingBatches();
    }

    @PostMapping("/approver/decision")
    public String approverDecision(@RequestParam List<Long> batchIds,
                                   @RequestParam String approverId,
                                   @RequestParam boolean approved) {
        Users approver = userRepository.findByUserId(approverId)
                .orElseThrow(() -> new RuntimeException("Approver not found"));

        approverService.approverDecision(batchIds, approver, approved);
        return approved ? "Batches approved by approver" : "Batches rejected by approver";
    }


    @GetMapping("/jr-manager/next-batch")
    public Batch getNextBatchForJrManager() {
        return approverService.getNextBatchForJrManager();
    }
    @PostMapping("/jr-manager/decision")
    public String jrManagerDecision(@RequestParam List<Long> batchIds,
                                    @RequestParam String jrManagerId,
                                    @RequestParam boolean approved,
                                    @RequestParam(required = false) String comment,
                                    @RequestParam String password
                                    ) {
        Users jrManager = userRepository.findByUserId(jrManagerId)
                .orElseThrow(() -> new RuntimeException("Jr Manager not found"));

        approverService.jrManagerDecision(batchIds, jrManager, approved,comment,password);
        return approved ? "Batch approved by Jr Manager" : "Batch rejected by Jr Manager";
    }


    @GetMapping("/sr-manager/next-batch")
    public Batch getNextBatchForSrManager() {
        return approverService.getNextBatchForSrManager();
    }

    @PostMapping("/sr-manager/decision")
    public String srManagerDecision(@RequestParam List<Long> batchIds,
                                    @RequestParam String srManagerId,
                                    @RequestParam boolean approved,
                                    @RequestParam(required = false) String comment,
                                    @RequestParam String password) {
        Users srManager = userRepository.findByUserId(srManagerId)
                .orElseThrow(() -> new RuntimeException("Sr Manager not found"));

        approverService.srManagerDecision(batchIds, srManager, approved,comment,password);
        return approved ? "Batch approved by Sr Manager" : "Batch rejected by Sr Manager";
    }

    @GetMapping("/director/next-batch")
    public Batch getNextBatchForDirector() {
        return approverService.getNextBatchForDirector();
    }

    @PostMapping("/director/decision")
    public String directorDecision(@RequestParam List<Long> batchIds,
                                    @RequestParam String directorId,
                                    @RequestParam boolean approved,
                                   @RequestParam(required = false) String comment,
                                   @RequestParam String password) {
        Users director = userRepository.findByUserId(directorId)
                .orElseThrow(() -> new RuntimeException("Director not found"));

        approverService.DirectorDecision(batchIds, director, approved,comment,password);
        return approved ? "Batch approved by Director" : "Batch rejected by Director";
    }
}

