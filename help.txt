package com.sc.faas.repository.Protegrity;

import com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO;
import io.quarkus.hibernate.orm.panache.PanacheRepository;
import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

import java.util.List;

@ApplicationScoped
public class ProtegrityInventoryRepository{
    @PersistenceContext
    EntityManager entityManager;

    public List<ProtegrityInventoryDTO> getAllProtegrityApplications(String appUser) {
        String jpql = "SELECT new com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO(" +
                "c.citSno, c.citApplicationName, c.citType, c.appOnboardDate, " +
                "c.citAppStatus, c.citItamNo, c.citAppOwner, c.citBusCriticality, " +
                "c.cetDusUnit, c.citPriContact, c.citRemGroup, c.citSlcContact, " +
                "c.citServiceProvided, " +
                "CASE WHEN c.citUseCase = 'Others' THEN c.citUseCaseOthers ELSE c.citUseCase END, " +
                "CASE WHEN c.citDatabase = 'Others' THEN c.citDbOthers ELSE c.citDatabase END, " +
                "c.citServiceModel, c.citBussJustification, c.citDoHostedType, " +
                "CASE WHEN c.citStorageDevices = 'Others' THEN c.citStorageOthers ELSE c.citStorageDevices END, " +
                "c.citTypePrNonPr, c.citReqNo, c.citActivity, c.citAmendedDate, " +
                "c.citAmendedBy, c.citRemarks, c.citEntSpoc, c.citProdDate, " +
                "c.recertDate, c.recertBy, TRUNC(c.recertAppRenewalDate), " +
                "CASE WHEN c.recertAppStatus = 'RECERT RESPOND' THEN 'INREVIEW' " +
                "WHEN c.recertAppStatus = 'RECERT COMPLETED' THEN 'COMPLETED' " +
                "ELSE c.recertAppStatus END, " +
                "c.citProdCrNo, 'VIEW') " +
                "FROM CutApplicationEntity c " +
                "WHERE c.citAppStatus != 'Decommissioned' " +
                "AND c.citType = 'protegrity' " +
                "AND (" +
                "c.pim = :appUser OR c.workOrderAssignee = :appUser OR " +
                "c.brquestApprover = :appUser OR c.citPriContact = :appUser OR " +
                "c.citAppOwner = :appUser OR c.citIntSpoc = :appUser OR " +
                "c.citSecContact = :appUser" +
                ")";

        return entityManager.createQuery(jpql, ProtegrityInventoryDTO.class)
                .setParameter("appUser", appUser)
                .getResultList();
    }

}
package com.sc.faas.dto.Protegrity;

import jakarta.annotation.Nullable;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.time.LocalDate;

@AllArgsConstructor
@NoArgsConstructor
public class ProtegrityInventoryDTO {
    public Long citSno;
    public String citApplicationName;
    public String citType;
    public LocalDate appOnboardDate;
    public String citAppStatus;
    public String citItamNo;
    public String citAppOwner;
    public String citBusCriticality;
    public String cetDusUnit;
    public String citPriContact;
    public String citRemGroup;
    public String citSlcContact;
    public String citServiceProvided;
    public String citUseCase;
    public String citDatabase;
    public String citServiceModel;
    public String citBussJustification;
    public String citDoHostedType;
    public String citStorageDevices;
    public String citTypePrNonPr;
    public String citReqNo;
    public String citActivity;
    public LocalDate citAmendedDate;
    public String citAmendedBy;
    public String citRemarks;
    public String citEntSpoc;
    public LocalDate citProdDate;
    public LocalDate recertDate;
    public String recertBy;
    public Long appExpDays;
    public String recertAppStatus;
    public String citProdCrNo;
    public String view;

}
package com.sc.faas.service.Protegrity;

import com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO;
import com.sc.faas.repository.Protegrity.ProtegrityInventoryRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.util.List;

@ApplicationScoped
public class ProtegrityInventoryService {
    @Inject
    ProtegrityInventoryRepository repository;
    public List<ProtegrityInventoryDTO> getAllProtegrityApplications(String appUser){
        return repository.getAllProtegrityApplications(appUser);
    }
}
package com.sc.faas;

import com.sc.faas.dto.Customer;
import com.sc.faas.dto.Protegrity.ProtegrityInventoryDTO;
import com.sc.faas.service.ProcessService;
import com.sc.faas.service.Protegrity.ProtegrityInventoryService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.MediaType;
import org.w3c.dom.stylesheets.LinkStyle;

import java.util.List;


@Path("/api/process/get/customer")
public class Function {

    @Inject
    ProtegrityInventoryService protegrityInventoryService;

    @Inject
    private ProcessService processService;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Customer getMockCustomer() {
        return processService.getMockCustomer();
    }

    @GET
    @Path("/protegrityapps")
    @Produces(MediaType.APPLICATION_JSON)
    public List<ProtegrityInventoryDTO> getAllProtegrityApplications(@QueryParam("appUser") String appUser){
        return protegrityInventoryService.getAllProtegrityApplications(appUser);
    }
}
quarkus.http.port=8081
quarkus.http.host=0.0.0.0
quarkus.otel.enabled=false

# Datasource configuration
quarkus.datasource.db-kind=oracle
quarkus.datasource.db-version=19c
# DB details here like user and pass
quarkus.datasource.username=app_bcbs_sit
quarkus.datasource.password=HKMGrand#Sep#0924AMHGrand

quarkus.datasource.jdbc.url=jdbc:oracle:thin:@(DESCRIPTION_LIST=(LOAD_BALANCE=off)(FAILOVER=on)(DESCRIPTION=(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=5)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=hklpdddas12cb-scan.hk.standardchartered.com)(PORT=1622)))(CONNECT_DATA=(SERVICE_NAME=COOLNXT_DEV.hk.standardchartered.com)))(DESCRIPTION=(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=5)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=xx.hk.standardchartered.com)(PORT=1622)))(CONNECT_DATA=(SERVICE_NAME=xx.hk.standardchartered.com))))

# Optional: Configure Hibernate ORM
quarkus.hibernate-orm.log.sql=true


#Email
quarkus.tls.trust-all=true
NOTIFICATION_PROCESS_API_HOST=${GET_EMAIL_SERVICE_URL}

#SC-IDP
quarkus.rest-client."com.sc.faas.client.IDPClient".url=${SC_IDP_URL}
SC_IDP_STORE_ID=${SC_IDP_STORE_ID}
