import React, { useState, useEffect } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import { Card, Table, Form, Button, Alert } from "react-bootstrap";
import axios from "axios";
import { jwtDecode} from "jwt-decode";
import qs from "qs";
import API from "../../axiosInstance";
 
export default function SubmitApproval({ role }) {
  const token = localStorage.getItem("jwt");
  const decoded = jwtDecode(token);
  const userId = decoded.sub;
  const [password, setPassword] = useState("");
 
  const [batch, setBatch] = useState(null);
  const [comments, setComments] = useState("");
 
  const getNextBatchUrl = () => {
    if (role === "jrmanager") return "/jr-manager/next-batch";
    if (role === "srmanager") return "/sr-manager/next-batch";
    if (role === "director") return "/director/next-batch";
    return "";
  };
 
  const getDecisionUrl = () => {
    if (role === "jrmanager") return "/jr-manager/decision";
    if (role === "srmanager") return "/sr-manager/decision";
    if (role === "director") return "/director/decision";
    return "";
  };
 
  const getUserIdParam = () => {
    if (role === "jrmanager") return { jrManagerId: userId };
    if (role === "srmanager") return { srManagerId: userId };
    if (role === "director") return { directorId: userId };
    return {};
  };
 
  useEffect(() => {
    const fetchNextBatch = async () => {
      const url = getNextBatchUrl();
      try {
        console.log(getNextBatchUrl());
        const res = await API.get( //pause func until completion
          `/api${url}`
         
        );
        setBatch(res.data);
      } catch (err) {
        console.error(err);
        alert("Failed to fetch batch!");
      }
    };
    console.log(role);
    fetchNextBatch();
  }, []); // for future
 
  const handleDecision = async (approved) => {
 
    try {
      const res = await API.post(
        `/api${getDecisionUrl()}`,
        null, // req body
        {
          params: { batchIds: [batch.batchId], approved, password, comment: comments, ...getUserIdParam() },
          paramsSerializer: (params) => qs.stringify(params, {arrayFormat: "repeat"})
         
        }
      );
      alert("Batch submitted successfullly")
      setBatch(null);
      setComments("");
    } catch (err) {
      console.error(err);
      alert("Failed to submit decision!");
    }
  };
 
  if (!batch) return <div className="text-center mt-5">No pending batches.</div>;
 
  return (
    <div className="container mt-4">
      <Card className="mb-3 shadow-sm">
        <Card.Header className="bg-primary text-white">Batch Information</Card.Header>
        <Card.Body>
          <Table striped bordered hover responsive>
            <tbody>
              <tr><th>Reference</th><td>{batch.yourRef}</td></tr>
              <tr><th>Name</th><td>{batch.batchName}</td></tr>
              <tr><th>Currency</th><td>{batch.currency}</td></tr>
              <tr><th>Status</th><td>{batch.status}</td></tr>
              <tr><th>Payment Ref</th><td>{batch.paymentRef}</td></tr>
            </tbody>
          </Table>
        </Card.Body>
      </Card>
 
      <Card className="mb-3 shadow-sm">
        <Card.Header className="bg-primary text-white">Batch Summary</Card.Header>
        <Card.Body>
          <Table striped bordered hover responsive>
            <thead>
              <tr>
                <th>Source Account ID</th>
                <th>Comments</th>
                <th># Payments</th>
                <th>Amount</th>
              </tr>
            </thead>
            <tbody>
             
                <tr>
                  <td>{batch.sourceAccId}</td>
                  <td>{batch.comments}</td>
                  <td>{batch.numOfPayments}</td>
                  <td>{batch.totAmt}</td>
                </tr>
       
            </tbody>
          </Table>
        </Card.Body>
      </Card>
      <Card className="mb-3 shadow-sm">
        <Card.Header className="bg-primary text-white">Approval Details</Card.Header>
        <Card.Body>
          <Form>
            <Form.Group className="mb-2">
              <Form.Label>Comments (optional)</Form.Label>
              <Form.Control
                as="textarea"
                rows={2}
                value={comments}
                onChange={(e) => setComments(e.target.value)}
              />
            </Form.Group>
            <Form.Group className="mb-2">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Enter your Password"
              />
            </Form.Group>
          </Form>
        </Card.Body>
      </Card>
 
      <div className="d-flex justify-content-end gap-2 mb-4">
        <Button variant="success" onClick={() => handleDecision(true)} disabled={!password}>
          Approve
        </Button>
        <Button variant="danger" onClick={() => handleDecision(false)} disabled={!password}>
          Reject
        </Button>
      </div>
    </div>
  );
}
