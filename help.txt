import { html, LitElement,css } from 'lit';
import { createContext, contexts } from '@scdevkit/service-bench-core';

const userContext = createContext(contexts.USER);

export class Grid extends LitElement {
    static styles = css`
    :host, sc-button-group, sc-title {
      display: flex;
      justify-content: center;
    }
  `;

  _userContextConsumer = userContext.createConsumer(this);

  render() {
    const user = this._userContextConsumer.value;
    return html`
      <sc-data-grid
  .data=${[
          {
                    "uuid": "0",
                    "firstName": "Cullen",
                    "lastName": "Nitzsche",
                    "age": 6,
                    "visits": 3,
                    "progress": 29,
                    "date": new Date("2026-03-24T11:02:16.218Z"),
                    "isAdult": false,
                    "object": {
                              "value": "tangerine fan, author 👊🏿"
                    },
                    "status": "status"
          },
          {
                    "uuid": "1",
                    "firstName": "Abraham",
                    "lastName": "Champlin",
                    "age": 1,
                    "visits": 3,
                    "progress": 83,
                    "date": new Date("2024-10-01T21:32:20.583Z"),
                    "isAdult": false,
                    "object": {
                              "value": "causeway enthusiast"
                    },
                    "status": "status"
          },
          {
                    "uuid": "2",
                    "firstName": "Stanton",
                    "lastName": "Barrows",
                    "age": 6,
                    "visits": 0,
                    "progress": 77,
                    "date": new Date("2025-04-22T01:25:47.924Z"),
                    "isAdult": true,
                    "object": {
                              "value": "inauguration enthusiast  🔬"
                    },
                    "status": "status"
          },
          {
                    "uuid": "3",
                    "firstName": "Mellie",
                    "lastName": "Kling",
                    "age": 2,
                    "visits": 16,
                    "progress": 53,
                    "date": new Date("2025-10-30T00:47:15.166Z"),
                    "isAdult": true,
                    "object": {
                              "value": "purity devotee"
                    },
                    "status": "status"
          }
]}
  .columns=${[
          {
                    "property": "name",
                    "header": "name",
                    
          },
          {
                    "property": "email",
                    "header": "email",
                    
          },
          {
                    "property": "dob",
                    "header": "dob",
          },
          {
                    "property": "gender",
                    "header": "gender",
          },{
                    "property": "Phone Number",
                    "header": "Phone Number",
                    
          },
]}
>
</sc-data-grid>
    `;
  }
}
http://localhost:8082/graphql
{
    "extensions": null,
    "data": {
        "show": [
            {
                "name": "manoj\n",
                "email": "manoj@mail.com\n",
                "dob": "2025-09-13",
                "gender": "male"
            }
        ]
    },
    "dataPresent": true,
    "errors": null
}
package com.sc.faas.service;

import com.sc.faas.dto.Details;
import com.sc.faas.dto.MyObject;
import jakarta.enterprise.context.ApplicationScoped;

import java.util.List;

@ApplicationScoped
public class ProcessService {
    public MyObject getObjectById(Long id) {
        return new MyObject(id, "Hello World");
    }

    public List<Details> show()
    {
        return Details.listAll();
    }
}
quarkus.http.port=8082
quarkus.http.host=0.0.0.0
quarkus.grpc.dev-mode.force-server-start=false
quarkus.otel.enabled=false
devkit.federated.supported.packages=com.sc.faas.dto
quarkus.rest-client.process-api.url=http://localhost:8080


quarkus.http.port=8080
quarkus.http.host=0.0.0.0
quarkus.otel.enabled=false
# Datasource configuration
quarkus.datasource.db-kind=postgresql    
quarkus.datasource.username=postgres
quarkus.datasource.password=
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:4000/qw

# Hibernate ORM config
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.packages=com.sc.faas.dto
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:11001
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.exposed-headers=location,link
quarkus.http.cors.access-control-max-age=24H
quarkus.http.cors.access-control-allow-credentials=true
package com.sc.faas.Xapi;

import com.sc.faas.dto.Details;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import java.util.List;

@Path("/fetch")
@RegisterRestClient(configKey = "process-api")
public interface Api {
    @GET
    @Path("/get")
    @Produces(MediaType.APPLICATION_JSON)
    List<Details> show();
}
package com.sc.faas.service;

import com.sc.faas.Xapi.Api;
import com.sc.faas.dto.Details;
import com.sc.faas.dto.Message;
import com.sc.faas.dto.MyObject;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import java.util.List;

@ApplicationScoped
public class QueryService {
    @Inject
    @RestClient
    Api api;

    public List<MyObject> objects() {
        return List.of(new MyObject(10L, "TEST"));
    }
    public List<Details> show() {
        return api.show();


    }

    public Message get_message(){
        return  new Message("Welcome to Service Bench - API - Kotlin Experience API (Java)");
    }
}
