import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Styles/custom.css";

import ScLogo from "../assets/ScLogo.jpg";
import Logout from "../assets/Logout.png";
import user from "../assets/user.jpg";

import { motion } from "framer-motion"; // ✅ Motion import
import { MdAccountBalance, MdOutlineManageAccounts } from "react-icons/md";
import {
  FaMoneyCheckAlt, FaChevronRight, FaChevronDown, FaLock, FaUserShield,
  FaUserTie, FaPlusCircle, FaUserEdit, FaUserPlus, FaCalculator, FaFileAlt,
  FaDownload, FaListUl, FaCheck, FaTimes, FaClipboardList, FaCheckSquare
} from "react-icons/fa";

function Dashboard({ role = "operator" }) {
  const [openTop, setOpenTop] = useState("accounts");
  const [hoverSection, setHoverSection] = useState({ top: null, section: null });
  const [selectedPath, setSelectedPath] = useState([]);

  const MENU = [
    {
      key: "accounts",
      label: "Accounts",
      icon: <MdAccountBalance />,
      sections: [
        {
          key: "current",
          label: "Current Account",
          items: [
            { key: "accDetails", label: "Account Details", icon: <FaFileAlt /> },
            { key: "serviceReq", label: "Service Request", icon: <FaClipboardList /> },
            { key: "employees", label: "Employees", icon: <FaUserTie /> },
          ],
        },
        {
          key: "change",
          label: "Change Account",
          items: [
            { key: "addAcc", label: "Add Account", icon: <FaUserPlus /> },
            { key: "editAcc", label: "Edit Account", icon: <FaUserEdit /> },
            { key: "editEmpAcc", label: "Edit Employee Accounts", icon: <MdOutlineManageAccounts /> },
          ],
        },
      ],
    },
    {
      key: "cash",
      label: "Cash",
      icon: <FaMoneyCheckAlt />,
      sections: [
        {
          key: "create",
          label: "Create",
          roles: ["creator"],
          items: [
            { key: "payroll", label: "Payroll", icon: <FaCheckSquare /> },
            { key: "rolledPayees", label: "Rolled Payees", icon: <FaUserTie /> },
            { key: "drafts", label: "Drafts", icon: <FaFileAlt /> },
            { key: "qcc", label: "Quick Currency Calculator", icon: <FaCalculator /> },
          ],
        },
        {
          key: "manage",
          label: "Manage",
          roles: ["manager"],
          items: [
            { key: "makeApprovers", label: "Make Approvers", icon: <FaUserShield /> },
            { key: "viewRolled", label: "View Rolled Payees", icon: <FaUserTie /> },
          ],
        },
        {
          key: "approve",
          label: "Approve",
          roles: ["approver"],
          items: [
            { key: "approved", label: "Approved Payees", icon: <FaCheck /> },
            { key: "pending", label: "Pending Payees", icon: <FaClipboardList /> },
          ],
        },
      ],
    },
    {
      key: "transactions",
      label: "Transactions",
      icon: <FaListUl />,
      sections: [
        {
          key: "rolled",
          label: "Rolled Payees",
          items: [
            { key: "failed", label: "Failed Transactions", icon: <FaTimes /> },
            { key: "success", label: "Successful Transactions", icon: <FaCheck /> },
            { key: "hold", label: "Hold Transactions", icon: <FaClipboardList /> },
          ],
        },
        {
          key: "estatements",
          label: "E-Statements",
          items: [
            { key: "filter", label: "Filter Transactions", icon: <FaListUl /> },
            { key: "download", label: "Download Transactions", icon: <FaDownload /> },
            { key: "summary", label: "Transactions Summary", icon: <FaFileAlt /> },
          ],
        },
      ],
    },
    {
      key: "settings",
      label: "Settings",
      icon: <FaLock />,
      sections: [
        {
          key: "settingsRoot",
          label: "General",
          items: [
            { key: "changePwd", label: "Change Password", icon: <FaLock /> },
            { key: "viewApprovers", label: "View Approvers", icon: <FaUserShield /> },
            { key: "viewManagers", label: "View Managers", icon: <FaUserTie /> },
            { key: "viewCreates", label: "View Creates", icon: <FaPlusCircle /> },
          ],
        },
      ],
    },
  ];

  const filterSectionsByRole = (top) => {
    if (top.key !== "cash") return top.sections;
    return top.sections.filter(
      (sec) => !sec.roles || sec.roles.includes(role) || role === "operator"
    );
  };

  const onClickFinalItem = (tLabel, sLabel, iLabel) => {
    setSelectedPath([tLabel, sLabel, iLabel]);
  };

  const renderThirdPanel = (topKey, sec, tLabel) => {
    const isOpen = hoverSection.top === topKey && hoverSection.section === sec.key;
    if (!isOpen) return null;
    return (
      <motion.div
        className="third-panel shadow-sm border"
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: 20 }}
        transition={{ duration: 0.2 }}
      >
        <div className="third-title border-bottom">{sec.label}</div>
        {sec.items.map((it) => (
          <div
            key={it.key}
            className="third-item"
            onClick={() => onClickFinalItem(tLabel, sec.label, it.label)}
          >
            <span className="me-2">{it.icon}</span>
            {it.label}
          </div>
        ))}
      </motion.div>
    );
  };

  const renderSidebar = () => (
    <>
      <img className="logo" src={ScLogo} alt="logo" />
      <span className="brand-name text-light">Straight2Bank</span>

      {MENU.map((top) => {
        const sections = filterSectionsByRole(top);
        return (
          <div key={top.key} className="top-block border-bottom">
            <button
              className={`top-item ${openTop === top.key ? "active" : ""}`}
              onClick={() => setOpenTop(openTop === top.key ? null : top.key)}
            >
              <span className="me-2">{top.icon}</span>
              {top.label}
              <span className="ms-auto">
                {openTop === top.key ? <FaChevronDown /> : <FaChevronRight />}
              </span>
            </button>

            {openTop === top.key && (
              <motion.div
                className="second-list border-start"
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.25 }}
              >
                {sections.map((sec) => (
                  <div
                    className="second-item border-bottom"
                    key={sec.key}
                    onMouseEnter={() => setHoverSection({ top: top.key, section: sec.key })}
                    onMouseLeave={() => setHoverSection({ top: null, section: null })}
                  >
                    <span>{sec.label}</span>
                    <FaChevronRight className="chev" />
                    {renderThirdPanel(top.key, sec, top.label)}
                  </div>
                ))}
              </motion.div>
            )}
          </div>
        );
      })}
    </>
  );

  const renderMain = () => {
    if (selectedPath.length === 0) {
      return (
        <div className="container-fluid">
          <div className="row g-4 mb-4">
            <div className="col-md-4">
              <motion.div whileHover={{ scale: 1.05 }} className="card gradient-card shadow-sm text-white">
                <div className="card-body">
                  <h5 className="card-title">Account Balance</h5>
                  <h3>₹ 2,00,45,000</h3>
                  <button className="b btn btn-light btn-sm mt-2">View Balance</button>
                </div>
              </motion.div>
            </div>
            <div className="col-md-4">
              <motion.div whileHover={{ scale: 1.05 }} className="card gradient-card-2 shadow-sm text-white">
                <div className="card-body">
                  <h5 className="card-title">Approval Status</h5>
                  <h3>5 Pending</h3>
                  <button className="b btn btn-light btn-sm mt-2">Approve</button>
                </div>
              </motion.div>
            </div>
            <div className="col-md-4">
              <motion.div whileHover={{ scale: 1.05 }} className="card gradient-card-3 shadow-sm text-white">
                <div className="card-body">
                  <h5 className="card-title">Transactions Today</h5>
                  <h3>23</h3>
                  <button className="b btn btn-light btn-sm mt-2">Transactions</button>
                </div>
              </motion.div>
            </div>
          </div>
        </div>
      );
    }
    return (
      <div className="p-4">
        <div className="breadcrumbx">{selectedPath.join("  ›  ")}</div>
        <div className="mt-3">
          <h4>{selectedPath[selectedPath.length - 1]}</h4>
          <p className="text-muted">
            This is placeholder content for <strong>{selectedPath.join(" / ")}</strong>.
          </p>
        </div>
      </div>
    );
  };

  return (
    <div className="d-flex dashboard-container">
      <div className="bar text-white p-3">{renderSidebar()}</div>

      <div className="flex-grow-1 d-flex flex-column">
        <nav className="px-3 d-flex justify-content-between align-items-center">
          <div className="userprofile text-light">
            <img className="logo2" src={user} alt="user" /> SCB0334
          </div>
          <img className="logo1" src={Logout} alt="logout" />
        </nav>
        <div className="flex-grow-1 p-4 bg-light">{renderMain()}</div>
      </div>
    </div>
  );
}

export default Dashboard;



.dashboard-container {
  height: 100vh;
  overflow: hidden;
}

.bar {
  width: 260px;
  background: linear-gradient(180deg, #002b5c, #004080);
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.logo {
  width: 45px;
  margin-bottom: 10px;
}

.brand-name {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 1rem;
  display: block;
}

.top-item {
  width: 100%;
  background: transparent;
  border: none;
  padding: 10px;
  font-size: 1rem;
  display: flex;
  align-items: center;
  gap: 8px;
  color: #fff;
  cursor: pointer;
  transition: background 0.2s;
}

.top-item:hover,
.top-item.active {
  background: rgba(255, 255, 255, 0.15);
  border-radius: 6px;
}

.second-list {
  margin-left: 10px;
  padding-left: 10px;
  border-color: rgba(255, 255, 255, 0.2) !important;
}

.second-item {
  padding: 8px;
  color: #ddd;
  cursor: pointer;
  position: relative;
}

.second-item:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #fff;
}

.third-panel {
  position: absolute;
  left: 100%;
  top: 0;
  background: #fff;
  color: #333;
  padding: 10px;
  min-width: 180px;
  border-radius: 6px;
  z-index: 1000;
}

.third-title {
  font-weight: bold;
  font-size: 0.9rem;
  padding-bottom: 5px;
  margin-bottom: 5px;
}

.third-item {
  padding: 6px 10px;
  cursor: pointer;
  border-radius: 4px;
  transition: background 0.2s;
}

.third-item:hover {
  background: #f5f5f5;
}

.breadcrumbx {
  font-size: 0.9rem;
  color: #555;
}

.gradient-card {
  background: linear-gradient(135deg, #007bff, #00c6ff);
  border-radius: 12px;
}

.gradient-card-2 {
  background: linear-gradient(135deg, #ff6a00, #ee0979);
  border-radius: 12px;
}

.gradient-card-3 {
  background: linear-gradient(135deg, #28a745, #85dcb8);
  border-radius: 12px;
}

.logo1 {
  width: 30px;
  cursor: pointer;
}

.logo2 {
  width: 35px;
  border-radius: 50%;
  margin-right: 8px;
}
