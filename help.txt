import { Routes, Route, Navigate,BrowserRouter, useNavigate } from "react-router-dom";
import 'bootstrap/dist/css/bootstrap.min.css';
import ChangeAccount from "./pages/ChangeAccount";
import EditAccount from "./pages/EditAccount";
import AccountDetails from "./pages/AccountDetails";
import ViewEmployees from "./pages/ViewEmployees";
import Layout from "./pages/Layout";
import ProtectedRoute from "./Components/ProtectedRoute";
import ChangePassword from "./pages/ChangePassword";
import PaymentForm from "./Components/PaymentForm";
import DraftManagement from "./Components/DraftManagement";
import ApprovePayee from "./pages/ApprovePayee";
import Manager from "./pages/Manager";
import RolledPayees from "./pages/RolledPayees";
import Transactions from "./pages/Transactions";
import Statements from "./pages/Statements";
import LoginPage from "./pages/LoginPage";
import SignUpPage from "./pages/SignUpPage";
import {jwtDecode} from "jwt-decode";
import { toast } from "react-toastify";



function App() {
  const token=localStorage.getItem("jwt");
  let role=null;
  if(token)
  {
    try{
      const decoded=jwtDecode(token);
      console.log(decoded);
      if(decoded.roles&&decoded.roles.length>0)
      {
        role=decoded.roles[0].toLowerCase();
        console.log(role);
        toast.success("Login Successfull",{
          autoClose:1000
        });
      }
      //role=decoded.roles?decoded.roles[0]:null;
    }
    catch(e)
    {
      console.error("invalid token",e);
    }
  }
  //const role="creator";
  return (
      <BrowserRouter>  
        <Routes>
          <Route path="/login" element={<LoginPage/>}/>
          <Route path="/signup" element={<SignUpPage/>}/>

            <Route path="/" element={token?<Layout role={role} />:<Navigate to="/login" replace/>}>
              <Route
                path="/add-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <ChangeAccount />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/edit-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator"]}>
                    <EditAccount />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/view-account"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <AccountDetails />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/view-employees"
                element={
                  <ProtectedRoute role={role} allowedRoles={["creator", "manager"]}>
                    <ViewEmployees />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/change-password"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator", "manager", "approver"]}
                  >
                    <ChangePassword />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/payee-roll"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator"]}
                  >
                    <PaymentForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/drafts"
                element={
                  <ProtectedRoute
                    role={role}
                    allowedRoles={["creator"]}
                  >
                    <DraftManagement />
                  </ProtectedRoute>
                }
              />
              <Route
              path="/approvals"
              element={
              <ProtectedRoute role={role} allowedRoles={["approver"]}>
                <ApprovePayee role={role}/>
              </ProtectedRoute>
                }
              />
               <Route
              path="/submits"
              element={

              

              <ProtectedRoute role={role} allowedRoles={["jrmanager","srmanager","director"]}>

                <Manager role={role}/>
              </ProtectedRoute>
                }
              />
               <Route
              path="/payees"
              element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <RolledPayees role={role}/>
              </ProtectedRoute>
                }
              />
              <Route
              path="/transactions"
              element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <Transactions/>
              </ProtectedRoute>
                }
              />
              <Route
              path="/statements"
              element={
              <ProtectedRoute role={role} allowedRoles={["creator"]}>
                <Statements/>
              </ProtectedRoute>
                }
              />
            </Route>
        </Routes>
        
      </BrowserRouter>
     
 
  );
}
export default App;
import axios from "axios";

const API = axios.create({
  baseURL: "http://localhost:8080", 
});


API.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("jwt"); 
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export default API;
import React, { useState } from "react";
import { Outlet, useLocation, useNavigate } from "react-router-dom";
import Sidebar from "../Components/Sidebar";
import "../Styles/layout.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import {
  UserPlus,
  UserCheck,
  FileText,
  Users,
  UserPlus2,
  CheckCircle,
  Send,
  Repeat,
  FileEdit,
  Settings,
} from "lucide-react";

const menuItems = [
  { name: "Add Account", icon: <UserPlus size={20} />, path: "/add-account" },
  { name: "Edit Account", icon: <UserCheck size={20} />, path: "/edit-account" },
  { name: "Account Details", icon: <FileText size={20} />, path: "/view-account" },
  { name: "Employees", icon: <Users size={20} />, path: "/view-employees" },
  { name: "Create Payee", icon: <UserPlus2 size={20} />, path: "/payee-roll" },
  { name: "Approve Payee", icon: <CheckCircle size={20} />, path: "/approvals" },
  { name: "Submit Payee", icon: <Send size={20} />, path: "/submits" },
  { name: "Transactions", icon: <Repeat size={20} />, path: "/transacions" },
  { name: "Drafts", icon: <FileEdit size={20} />, path: "/drafts" },
  { name: "Settings", icon: <Settings size={20} />, path: "/change-password" },
];

const Layout = ({ role }) => {
  const [sidebarWidth, setSidebarWidth] = useState(80); 
  const navigate = useNavigate();
  const location = useLocation();
  const showCenterMenu = location.pathname === "/";

  return (
    <div className="layout-container">
      
      <Sidebar role={role} setSidebarWidth={setSidebarWidth} />

     
      <div
        className="layout-content"
        style={{
          marginLeft: `${sidebarWidth + 40}px`,
          transition: "margin-left 0.3s ease",
          flex: 1,
          padding: "20px",
        }}
      >
        {showCenterMenu ? (
          <div className="menu-center">
            <div className="menu-grid">
              {menuItems.map((item, idx) => (
                <div
                  key={idx}
                  onClick={() => navigate(item.path)}
                  className="menu-card"
                >
                  <span className="menu-icon">{item.icon}</span>
                  <span className="menu-text">{item.name}</span>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <Outlet />
        )}
      </div>
    </div>
  );
};

export default Layout;

import React, { useState } from 'react';
import { useNavigate } from "react-router-dom";
import API from "../axiosInstance";  // axios instance
import "bootstrap/dist/css/bootstrap.min.css";
import "../Styles2/LoginPage.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

function LoginPage() {
    const navigate = useNavigate();
    const [form, setForm] = useState({ userId: "", password: "" });
    const [error, setError] = useState("");

    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const res = await API.post(`/api/auth/login?userId=${form.userId}&password=${form.password}`);
            localStorage.setItem("jwt", res.data);
            console.log(res.data);
            localStorage.setItem("userId", form.userId);
            navigate("/"); 
        } catch (err) {
            setError("Invalid credentials");
        }
    };

    return (
        <div className="container-fluid min-vh-100 d-flex flex-column p-0">
             <div className="row header-bar">
                <div className="col-6 header-left"></div>
                <div className="col-6 header-right"></div>
            </div>

            <div className="row justify-content-center mt-3">
                <div className="col-auto">
                    {/*<img src="" className="login-logo" alt="Logo" />*/}
                </div>
            </div>
            <div className="row justify-content-center align-items-center flex-grow-1 login-container">
                <div className="col-12 col-md-6 col-lg-4">
                    <div className="card p-4 login-box">
                        <h4 className="mf text-center">Login</h4>
                        <form onSubmit={handleSubmit}>
                            <div className="mb-3 text-start">
                                <label className="form-label">Emp ID</label>
                                <input type="text" className="form-control" name="userId"
                                    value={form.userId} onChange={handleChange} />
                            </div>
                            <div className="mb-3 text-start">
                                <label className="form-label">Password</label>
                                <input type="password" className="form-control" name="password"
                                    value={form.password} onChange={handleChange} />
                            </div>
                            {error && <p className="text-danger">{error}</p>}
                            <div className="d-grid">
                                <button type="submit" className="btn btn-primary">Login</button>
                                <button type="button" className="bn btn-link p-0" onClick={() => navigate("/signup")}>Sign Up</button>
                            </div>
                        </form>
                        <div className="text-center mt-3 login-footer">Here For Good</div>
                    </div>
                </div>
            </div>
        </div>
    );
}
export default LoginPage;

import React, { useState } from 'react';
import { useNavigate } from "react-router-dom";
import API from "../axiosInstance";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Styles2/SignUpPage.css";

function SignUpPage() {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    userId: "",
    email: "",
    password: "",
    retype_password: "",
    securityQuestion: "Mother's Surname",
    securityAnswer: ""
  });

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (form.password !== form.retype_password) {
      alert("Passwords do not match");
      return;
    }
    try {
      await API.post("/api/auth/signup", {
        userId: form.userId,
        password: form.password,
        securityQuestion: form.securityQuestion,
        securityAnswer: form.securityAnswer
      });
      alert("Signup successful! Please login.");
      navigate("/login");
    } catch (err) {
      alert("Signup failed. Try again.");
    }
  };

  return (
    <div className="container-fluid min-vh-100 overflow-hidden d-flex flex-column p-0">
      <div className="row header-bar">
        <div className="col-6 header-left"></div>
        <div className="col-6 header-right"></div>

      </div>
      <div className="row justify-content-center mt-3">
        <div className="col-auto">
          <img src=""className="login-logo"/> 
        </div>
      </div>
      <div className="row justify-content-center mt-2">
        <div className="col-12 text-center fw-bold">Standard Chartered Internal Payment InitationSystem</div>
          
        
      </div>
      <div className="row justify-content-center align-items-center flex-grow-1">
        <div className="col-12 col-md-6 col-lg-4">
          <div className="card p-4">
            <h4 className="text-center">Sign Up</h4>
            <form onSubmit={handleSubmit}>
            <label className="form-label">Employee ID</label>
              <input type="text" className="form-control mb-2" name="userId"
                value={form.userId} onChange={handleChange} placeholder="Employee ID" />
                <label className="form-label">Email</label>
              <input type="email" className="form-control mb-2" name="email"
                value={form.email} onChange={handleChange} placeholder="Email ID" />
                <label className="form-label">Password</label>
              <input type="password" className="form-control mb-2" name="password"
                value={form.password} onChange={handleChange} placeholder="Password" />
                <label className="form-label">Confirm Password</label>
              <input type="password" className="form-control mb-2" name="retype_password"
                value={form.retype_password} onChange={handleChange} placeholder="Re-type Password" />
                <label className="form-label">Question</label>
              <select className="form-select mb-2" name="securityQuestion"
                value={form.securityQuestion} onChange={handleChange}>
                <option value="Mother's Surname">Mother's Surname</option>
                <option value="Pet's Name">Pet's Name</option>
              </select>
              <label className="form-label">Answer</label>
              <input type="text" className="form-control mb-2" name="securityAnswer"
                value={form.securityAnswer} onChange={handleChange} placeholder="Security Answer" />
              <button type="button" className="bn btn-link p-0" onClick={()=>navigate("/login")}>Back to Login</button>
              <div className="d-grid">
                <button type="submit" className="btn btn-success">Sign Up</button>
              </div>
            </form>
            <div className="text-center mt-3 login-footer">Here For Good</div>
          </div>
        </div>
      </div>
      {/* ... your footer ... */}
    </div>
  );
}
export default SignUpPage;
