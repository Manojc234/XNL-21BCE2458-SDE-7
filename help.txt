process-api
package com.sc.faas.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class Customer {
    private Long id;
    private String name;
    private String email;
    private String phone;
}

package com.sc.faas.repository;

import com.sc.faas.dto.Customer;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class CustomerRepository {

    public Customer getMockCustomer() {
        return new Customer(
                2031034L,
                "Jaswitha Thangadadona",
                "thangadadonaj@gmail.com",
                "9502103172"
        );
    }
}

package com.sc.faas.service;

import com.sc.faas.dto.Customer;
import com.sc.faas.repository.CustomerRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class ProcessService {

    @Inject
    private CustomerRepository customerRepository;

    public Customer getMockCustomer() {
        return customerRepository.getMockCustomer();
    }
}

 @GET
    @Path("/get/customer")
    @Produces(MediaType.APPLICATION_JSON)
    public Customer getCustomer() {
        System.out.println("Fetching customer data");
        return customerRepository.getMockCustomer();
    }
quarkus.http.port=8081
quarkus.http.host=0.0.0.0
quarkus.otel.enabled=false

# Datasource configuration
quarkus.datasource.db-kind=oracle
quarkus.datasource.db-version=19c
# DB details here like user and pass
quarkus.datasource.username=app_bcbs_sit
quarkus.datasource.password=HKMGrand#Sep#0924AMHGrand

quarkus.datasource.jdbc.url="confidential"

# Optional: Configure Hibernate ORM
quarkus.hibernate-orm.log.sql=true


#Email
quarkus.tls.trust-all=true
NOTIFICATION_PROCESS_API_HOST=${GET_EMAIL_SERVICE_URL}

#SC-IDP
quarkus.rest-client."com.sc.faas.client.IDPClient".url=${SC_IDP_URL}
SC_IDP_STORE_ID=${SC_IDP_STORE_ID}  

exp-api 
package com.sc.faas.client;

import com.sc.faas.dto.Customer;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/v1")
@RegisterRestClient
public interface XApi {
    @GET
    @Path("/getCustomer")
    @Produces(MediaType.APPLICATION_JSON)
    Customer getMockCustomer();

}
package com.sc.faas.dto;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public class Customer {
        private Long id;
        private String name;
        private String email;
        private String phone;

}
package com.sc.faas.service;

import com.sc.faas.client.XApi;
import com.sc.faas.dto.Customer;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import java.util.List;

@ApplicationScoped
public class QueryService {
    @Inject
    @RestClient
    XApi api;
    public Customer getMockCustomer() {
        return api.getMockCustomer();
    }

}
package com.sc.faas;

import java.util.List;

import com.expediagroup.graphql.generator.TopLevelObject;
import com.sc.devkit.graphql.dto.Input;
import com.sc.devkit.graphql.service.GraphQLServer;
import com.sc.devkit.graphql.service.GraphQLUtil;
import com.sc.faas.service.MutationService;
import com.sc.faas.service.QueryService;

import io.quarkus.funqy.Funq;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class Function {

	@Inject
	private QueryService queryService;

	@Inject
	private MutationService mutationService;

	private GraphQLServer graphQLServer;

	public GraphQLServer getGraphQLServer() {
		if (graphQLServer == null) {
			graphQLServer = new GraphQLServer.Builder().federatedSupportedPackages(List.of("com.sc.faas.dto"))
					.queries(List.of(new TopLevelObject(queryService, GraphQLUtil.fromJavaClass(QueryService.class))))
					.mutations(List
							.of(new TopLevelObject(mutationService, GraphQLUtil.fromJavaClass(MutationService.class))))
					.build();
		}
		return graphQLServer;
	}

	@Funq
	public Object graphql(Input input) {
		return getGraphQLServer().serve(input);
	}
}
quarkus.http.port=8080
quarkus.http.host=0.0.0.0
quarkus.grpc.dev-mode.force-server-start=false
quarkus.otel.enabled=false
devkit.federated.supported.packages=com.sc.faas.dto
%dev.quarkus.http.cors.origins=/.*/ 
quarkus.rest-client.process-api.url=http://localhost:8081
#quarkus.rest-client."com.sc.faas.client.ServicesClient".url=${QUARKUS_REST_CLIENT_COM_SC_FAAS_CLIENT_SERVICESCLIENT_URL:http://get-service-process-api.55313-100-get-service}--confidential

# Enable CORS
quarkus.http.cors=true

# Allow all origins (you can specify specific origins if needed)
quarkus.http.cors.origins=*

# Allow specific HTTP methods
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS

# Allow specific headers
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# Allow credentials
quarkus.http.cors.access-control-allow-credentials=true
