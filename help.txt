package com.scb.Payment.Initiation.controller;



import com.scb.Payment.Initiation.entity.Batch;
import com.scb.Payment.Initiation.entity.Users;
import com.scb.Payment.Initiation.repository.UserRepository;

import com.scb.Payment.Initiation.service.ApproverService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@RestController
@RequestMapping("/api")
public class ApproverController {

    @Autowired
    private ApproverService approverService;

    @Autowired
    private UserRepository userRepository;



    @GetMapping("/approver/batches")
    public List<Batch> getPendingBatches() {
        return approverService.getPendingBatches();
    }

    @PostMapping("/approver/decision")
    public String approverDecision(@RequestParam List<Long> batchIds,
                                   @RequestParam String approverId,
                                   @RequestParam boolean approved) {
        Users approver = userRepository.findByUserId(approverId)
                .orElseThrow(() -> new RuntimeException("Approver not found"));

        approverService.approverDecision(batchIds, approver, approved);
        return approved ? "Batches approved by approver" : "Batches rejected by approver";
    }


    @GetMapping("/jr-manager/next-batch")
    public Batch getNextBatchForJrManager() {
        return approverService.getNextBatchForJrManager();
    }
    @PostMapping("/jr-manager/decision")
    public String jrManagerDecision(@RequestParam List<Long> batchIds,
                                    @RequestParam String jrManagerId,
                                    @RequestParam boolean approved,
                                    @RequestParam(required = false) String comment,
                                    @RequestParam String password
                                    ) {
        Users jrManager = userRepository.findByUserId(jrManagerId)
                .orElseThrow(() -> new RuntimeException("Jr Manager not found"));

        approverService.jrManagerDecision(batchIds, jrManager, approved,comment,password);
        return approved ? "Batch approved by Jr Manager" : "Batch rejected by Jr Manager";
    }


    @GetMapping("/sr-manager/next-batch")
    public Batch getNextBatchForSrManager() {
        return approverService.getNextBatchForSrManager();
    }

    @PostMapping("/sr-manager/decision")
    public String srManagerDecision(@RequestParam List<Long> batchIds,
                                    @RequestParam String srManagerId,
                                    @RequestParam boolean approved,
                                    @RequestParam(required = false) String comment,
                                    @RequestParam String password) {
        Users srManager = userRepository.findByUserId(srManagerId)
                .orElseThrow(() -> new RuntimeException("Sr Manager not found"));

        approverService.srManagerDecision(batchIds, srManager, approved,comment,password);
        return approved ? "Batch approved by Sr Manager" : "Batch rejected by Sr Manager";
    }

    @GetMapping("/director/next-batch")
    public Batch getNextBatchForDirector() {
        return approverService.getNextBatchForDirector();
    }

    @PostMapping("/director/decision")
    public String directorDecision(@RequestParam List<Long> batchIds,
                                    @RequestParam String directorId,
                                    @RequestParam boolean approved,
                                   @RequestParam(required = false) String comment,
                                   @RequestParam String password) {
        Users director = userRepository.findByUserId(directorId)
                .orElseThrow(() -> new RuntimeException("Director not found"));

        approverService.DirectorDecision(batchIds, director, approved,comment,password);
        return approved ? "Batch approved by Director" : "Batch rejected by Director";
    }
}

